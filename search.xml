<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux学习笔记</title>
    <url>/2024/10/22/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="学前提醒"><a href="#学前提醒" class="headerlink" title="学前提醒"></a>学前提醒</h1><ol>
<li>自然：不要死记Linux命令，先敲一遍，以后在学习和工作中练习就足够了，需要的时候就查命令手册</li>
<li>Centos系统在2024年已停止更新，后续可以考虑学一下ubuntu。</li>
</ol>
<h1 id="初识Linux"><a href="#初识Linux" class="headerlink" title="初识Linux"></a>初识Linux</h1><ol>
<li><p>什么是Linux？即服务器操作系统的一种。<strong>操作系统就是第一层软件</strong>，作为用户和计算机硬件之间的桥梁，调度和管理计算机硬件进行工作。对于前后端开发人员、运维测试人员、大数据等都是必学的内容</p>
</li>
<li><p>Linux的组成：由Linux系统<strong>内核</strong>+系统级应用<strong>程序</strong>(简单理解成系统自带的软件，比如文件管理，图片查看等)组成，其他的软件都叫第三方应用程序。</p>
</li>
<li><p>Linux发行版：任何人都可以获得并修改内核，并且自行集成系统级程序，提供了内核+系统级程序的完整封装，称之为Linux发行版。常见的ubuntu和redhat等就是Linux的发行版。所以也<strong>不要纠结学哪一个，学会了一个，其他的都会触类旁通了</strong>。</p>
</li>
</ol>
<h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p>即借助虚拟化技术，我们可以在系统中，通过软件模拟计算机硬件，并给虚拟硬件安装真实的操作系统。</p>
<p>学习Linux可以选择使用虚拟软件，比如VMware，或者是买一个云服务器。</p>
<p>Windows网络连接(网络适配器)查看方法<code>win+R</code> 输入<code>ncpa.cpl</code> 查看是否有VMnet1和VMnet8的网卡，有了虚拟机才能连上网。</p>
<h2 id="扩展：WSL"><a href="#扩展：WSL" class="headerlink" title="扩展：WSL"></a>扩展：WSL</h2><p>就是Windows Subsystem for Linux，没错，Windows系统可以得到Linux系统环境，不过目前的主流还是用虚拟软件。</p>
<p>方法：(Windows 11)在开始中搜索-“启用或者关闭Windows功能”-“适用于Linux的Windows子系统 ”打勾，“虚拟机平台”打勾并重启，然后在应用商店里面搜索对应的Linux发行版下载即可。</p>
<h1 id="Linux入门"><a href="#Linux入门" class="headerlink" title="Linux入门"></a>Linux入门</h1><p>学习Linux需要掌握<strong>命令</strong>来操作系统，图形化页面很少使用。图形化界面易于理解，但是命令行效率更高。</p>
<p>那么在哪里敲命令行呢？VMware里面可以，但是不方便。建议使用Xshell或者是FinalShell软件，这里我用的是Xshell。</p>
<p>通过命令<code>ipaddr</code> 查看虚拟机的IP地址，然后填写到Xshell的新对话中。</p>
<p>Linux<strong>注意事项</strong></p>
<ol>
<li><strong>快照</strong>：建议关机之后保存，开机情况下会比较卡。</li>
</ol>
<h1 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h1><h2 id="Linux目录"><a href="#Linux目录" class="headerlink" title="Linux目录"></a>Linux目录</h2><p><strong>一切皆文件</strong>：指的是Linux会将一切对象映射成文件。Linux中最重要的就是目录，以后从事相关工作要背主目录-<strong>因为在生产环境中是没有图形化界面的，只有控制台。</strong>对于其他目录要了解其英文单词和实际用途。</p>
<p>图片演示</p>
<p><img src="/2024/10/22/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20221027214128.png" alt="20221027214128"></p>
<ul>
<li><code>/</code>，根目录是最顶级的目录了，也就是说<code>~</code>是<code>/</code>的子目录</li>
<li>Linux有且只有一个顶级目录：<code>/</code></li>
<li>路径描述的层次关系同样适用<code>/</code>来表示:比如&#x2F;usr&#x2F;bin&#x2F;hello.py,第一个&#x2F;是根目录，其他的是层级关系。</li>
</ul>
<p>命令：就是Linux程序，以字符的方式与计算机交流。</p>
<p>命令讲解：无论是什么命令，用于什么用途，在Linux中，命令有其通用的格式<br>command [-options] [parameter]</p>
<ul>
<li>command:命令本身</li>
<li>-options:[可选，非必填]命令的一些选项，可以通过选项控制命令的行为细节</li>
<li>parameter:[可选，非必填]命令的参数，多数用于命令的指向目标等. 语法中的[],表示可选的意思</li>
</ul>
<p>比如<code>ls -l /home/hello</code> ls是命令，-l是选项，&#x2F;home&#x2F;hello是参数，意思是以列表的形式，展示&#x2F;home&#x2F;hello 目录的内容。</p>
<h2 id="目录切换命令"><a href="#目录切换命令" class="headerlink" title="目录切换命令"></a>目录切换命令</h2><h3 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h3><p>功能：列出文件夹信息</p>
<p>语法：<code>ls [-l -h -a] [参数]</code></p>
<ul>
<li>参数：被查看的文件夹，不提供参数，表示查看当前工作目录</li>
<li>-l，以列表(list)形式查看</li>
<li>-h，配合-l，以更加人性化的方式显示文件大小</li>
<li>-a，表示all的意思，即显示所有文件，包括隐藏文件(在Linux中以<code>.</code>开头的，均是隐藏的)</li>
</ul>
<p>演示如下</p>
<p><img src="/2024/10/22/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/001.png" alt="001"></p>
<p>注意：当前登录用户的HOME目录作为当前工作目录，所以ls命令列出的是HOME目录的内容</p>
<p>HOME目录：每个操作用户在Linux系统的个人账户目录，路径在：&#x2F;home&#x2F;用户名</p>
<p>普通用户的HOME目录，默认在：<code>/home/用户名</code>，而root用户的HOME目录，在：<code>/root</code></p>
<p>语法中的选项是可以组合使用的，比如学习的-和-l可以组合应用,比如<code>ls -la</code></p>
<p><img src="/2024/10/22/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/002.png" alt="002"></p>
<h3 id="cd-change-directory-命令"><a href="#cd-change-directory-命令" class="headerlink" title="cd(change directory) 命令"></a>cd(change directory) 命令</h3><p>功能：切换工作目录</p>
<p>语法：<code>cd [linux路径]</code></p>
<p>参数：目标目录，要切换去的地方，不提供默认切换到<strong>当前登录用户HOME目录</strong> </p>
<h3 id="pwd-print-work-directory"><a href="#pwd-print-work-directory" class="headerlink" title="pwd(print work directory)"></a>pwd(print work directory)</h3><p>功能：展示当前所在的工作目录</p>
<p>语法:<code>pwd</code></p>
<p><img src="/2024/10/22/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/003.png" alt="003"></p>
<p><strong>相对路径与绝对路径</strong></p>
<ul>
<li><p>相对路径，&#x3D;&#x3D;非&#x3D;&#x3D;<code>/</code>开头的称之为相对路径：相对路径表示以<code>当前目录</code>作为起点，去描述路径，如<code>test/a.txt</code>，表示当前工作目录内的test文件夹内的a.txt文件</p>
</li>
<li><p>绝对路径，&#x3D;&#x3D;以&#x3D;&#x3D;<code>/</code>开头的称之为绝对路径：绝对路径从<code>根</code>开始描述路径</p>
</li>
</ul>
<p><strong>特殊路径符</strong></p>
<ul>
<li><code>.</code>，表示当前，比如.&#x2F;a.txt，表示当前文件夹内的<code>a.txt</code>文件</li>
<li><code>..</code>，表示上级目录，比如<code>../</code>表示上级目录，<code>../../</code>表示上级的上级目录</li>
<li><code>~</code>，表示用户的HOME目录，比如<code>cd ~</code>，即可切回用户HOME目录</li>
</ul>
<h2 id="创建目录mkdir命令"><a href="#创建目录mkdir命令" class="headerlink" title="创建目录mkdir命令"></a>创建目录mkdir命令</h2><p>英语：make directory</p>
<p>功能：创建文件夹</p>
<p>语法：<code>mkdir [-p] 参数</code></p>
<ul>
<li>参数：被创建文件夹的路径</li>
<li>选项：-p，可选，表示创建前置路径，比如你输入<code>mkdir -p /usr/test/work</code> 但是test文件夹没有创建，那么<code>-p</code>会帮助创建一个test的文件夹，然后再创建work文件夹</li>
<li>此图第一个d表示这是一个文件夹，后面的与<strong>权限</strong>有关</li>
</ul>
<p><img src="/2024/10/22/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/004.png" alt="004"></p>
<h2 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h2><h3 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h3><p>功能：创建文件，注意要<strong>添加后缀</strong></p>
<p>语法：<code>touch 参数</code> 参数：被创建的文件路径</p>
<h3 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h3><p>功能：查看文件内容</p>
<p>语法：<code>cat 参数</code> 参数：被查看的文件路径</p>
<h3 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h3><p>功能：查看文件，可以支持翻页查看</p>
<p>语法：<code>more 参数</code> 参数：被查看的文件路径</p>
<p>在查看过程中：按<code>空格</code>键翻页 <code>q</code>退出查看 读者可以试试<code>more /etc/services</code> etc(法语et cetera,表示<strong>以及其他内容</strong>)</p>
<h3 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h3><p>命令行输入：<code>clear</code> 或者是ctrl+l</p>
<p><em><strong>To be continued</strong></em>……</p>
<h1 id="软件在Linux上的安装部署"><a href="#软件在Linux上的安装部署" class="headerlink" title="软件在Linux上的安装部署"></a>软件在Linux上的安装部署</h1><p>考虑到不同的人群使用Linux的开发方向不同，我这里只选择MySQL、Redis和NGINX的安装，其他的读者可以看本文目录下“参考”中的参考视频和教程，有选择地去学习。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><strong>软件资源</strong></p>
<ol>
<li>Xshell：<a href="https://www.xshell.com/zh/free-for-home-school/">家庭&#x2F;学校免费 - NetSarang Website (xshell.com)</a></li>
<li>Linux相关发行版：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/centos-vault/">清华大学开源软件镜像站</a></li>
</ol>
<p><strong>参考视频和教程</strong></p>
<ol>
<li><a href="https://blog.csdn.net/weixin_74195551/article/details/127288338">安装虚拟机（VMware）保姆级教程（附安装包）</a></li>
<li><a href="https://www.bilibili.com/video/BV1Sv411r7vd?vd_source=bb8dacb993f11c0e39f8147c98a2894c">【小白入门 通俗易懂】韩顺平 一周学会Linux</a> ,注意韩顺平老师的视频是2021年的，视频中有些网站已经失效，请自行Google或百度查找。</li>
<li><a href="https://www.bilibili.com/video/BV1n84y1i7td?p=3&vd_source=bb8dacb993f11c0e39f8147c98a2894c">黑马程序员新版Linux零基础快速入门到精通，全涵盖linux系统知识、常用软件环境部署、Shell脚本、云平台实践、大数据集群项目实战等</a></li>
</ol>
<p><strong>参考书籍和资料</strong></p>
<ol>
<li><a href="https://www.linuxcool.com/">Linux命令大全(手册) – 真正好用的Linux命令在线查询网站</a> 这个是学Linux必备的，相比某度、CSDN更加简洁，但是如果要更加细节的解释可能还是要依靠CSDN或者Google等搜索引擎。</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客测试与更新</title>
    <url>/2024/06/10/hexo%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="hexo博客更新和待更新计划"><a href="#hexo博客更新和待更新计划" class="headerlink" title="hexo博客更新和待更新计划"></a>hexo博客更新和待更新计划</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">更新内容</button><button type="button" class="tab">未来可能更新内容</button><button type="button" class="tab">更新方法</button></div><div class="tab-contents"><div class="tab-item-content active"><blockquote>
<p>以下更新内容都是从最后一次更新开始的</p>
</blockquote>
<ol>
<li>butterfly主题从4.13.0更新到5.0.0版本</li>
<li>首页添加了磁贴,修复了磁贴名字和描述不匹配的问题</li>
<li>更新了留言板</li>
<li>优化了搜索功能</li>
<li>禁止B站视频自动播放</li>
<li>更新了主页“关于”部分</li>
<li>修复了几处笔误的问题</li>
<li>优化了评论功能的选择</li>
</ol></div><div class="tab-item-content"><ol>
<li>子菜单展示内容(比如展示图表)；方法：将子菜单里面的index.md当做普通的md文件，通过基本的markdown语言和butterfly专有语法实现效果，建议写成总领式的文章或者展示页面。</li>
<li>添加一下赞助墙</li>
<li>更新算法相关博客并添加数学动画视频或者是算法演示动画。</li>
</ol></div><div class="tab-item-content"><h2 id="hexo框架更新"><a href="#hexo框架更新" class="headerlink" title="hexo框架更新"></a>hexo框架更新</h2><p>参考此博客<a href="https://blog.zhheo.com/p/6d1f1f98.html">如何更新Hexo及插件的版本？如何更新主题版本？ | 张洪Heo (zhheo.com)</a></p>
<p>简单来说就是先进入博客根目录然后在终端输入<code>npm update</code> ，确保node.js包是最新版本。然后输入<code>npm outdated</code> 看哪些插件已经过时，可以更新。然后修改根目录的package.json文件，将对应插件名称所对应的版本号更改为要更新的版本号。再在终端输入<code>npm install --save</code> 开始更新hexo及其插件，通过<code>hexo version</code> 查看是否已经更新</p>
<h2 id="butterfly主题更新"><a href="#butterfly主题更新" class="headerlink" title="butterfly主题更新"></a>butterfly主题更新</h2><blockquote>
<p>更新前记得留下blog快照</p>
</blockquote>
<p>官方文档：<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 文檔(一) 快速開始 | Butterfly</a></p>
<p>从butterfly5.0.0版本开始，可以直接在hexo根目录下输入<code>npm update hexo-theme-butterfly</code></p>
<p>如果不行，就在你的博客&#x2F;themes&#x2F;butterfly 根目录下打开git bash并输入<code>git pull</code> 即可更新</p>
<p>建议以后更新博客直接在命令行输入<code>hexo cl;hexo g</code> 一键清除与生成，多个分号代表分别执行。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<h2 id="个人hexo博客更新讲解"><a href="#个人hexo博客更新讲解" class="headerlink" title="个人hexo博客更新讲解"></a>个人hexo博客更新讲解</h2><p>在md文件开头的是配置部分，tags是标签(就是在文档末尾出现的几个按钮文字)，<strong>可以有很多个</strong>;categories是分类，建议将其分为大类，<strong>小类从属于大类</strong>。在首页中博客只显示发布日期，更新日期、分类和标签(第一个).</p>
<p>示例代码如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tags:</span> </span><br><span class="line"> <span class="bullet">-</span> <span class="string">blog</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">测试</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">教程</span></span><br></pre></td></tr></table></figure>

<p>评论功能：</p>
<ol>
<li>我设置文章自动放开评论功能，就不需要在开头写<code>comments: true</code> 这行代码了。</li>
<li>我设置的是twikoo静态评论控制，搭建教程可以参考如下链接<a href="https://blog.hihahoo.com/archives/fc6989f5.html#1-twikoo%E9%83%A8%E7%BD%B2">Hexo主题butterfly集成评论功能（twikoo） | Hihahoo：想你所想 做你所做</a></li>
</ol>
<p>文章置顶功能：可以直接在文章的 <code>front-matter</code> 区域里添加 <code>sticky: 1</code> 属性来把这篇文章置顶。数值越大，置顶的优先级越大。参考链接<a href="https://liangshenglei.github.io/2023/03/06/Butterfly%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/index.html">Butterfly 主题的详细配置 | 梁圣磊の博客 (liangshenglei.github.io)</a></p>
<p>文章加密功能：文章加密插件  <a href="https://polar-bear.eu.org/2023/07/21/ce-shi/">https://polar-bear.eu.org/2023/07/21/ce-shi/</a> 也许以后添加。</p>
<p>磁贴功能：我干脆把主设置里面的<strong>descr</strong>部分删掉，没写就是对的o(<em>￣▽￣</em>)ブ</p>
<h2 id="测试图片"><a href="#测试图片" class="headerlink" title="测试图片"></a>测试图片</h2><p>阿里云图片测试</p>
<p><img src="https://blog-img-copy.oss-cn-guangzhou.aliyuncs.com/C:%5CUsers%5Ckai98%5CPictures%5C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%5Cpost-img1.png"></p>
<p>本地图片测试</p>
<p><img src="/2024/06/10/hexo%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95/C__Users_kai98_Pictures_%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87_post-img1.png"></p>
<p><strong>图片上传方法</strong></p>
<ol>
<li><p>通过picgo图床实现图片上传，只需要在md文件里面插入-图片，然后就会自动把插入的文件上传到oss上面，要取消的时候就点击文件-偏好设置-上传服务设定-将picgo换成无即可。</p>
</li>
<li><p>参考此博客<a href="https://blog.csdn.net/weixin_43702620/article/details/118655308">hexo搭建博客后图片无法显示的完美解决_hexo博客图片不显示-CSDN博客</a> 简单来说就是在_post文件夹内对应每一个md文件创建同名的文件夹，然后将图片放在里面，需要引用的时候就按照<code>![](./文件夹名/图片名.png</code> 进行引用，<strong>博主因为部署的原因主要使用此方法</strong></p>
</li>
<li><p>如果zeabur图片不显示，可以使用<code>![图片名](图片名.png)</code> 此方法，<strong>注意图片必须放在与md文件同名的文件夹下且不允许中文命名</strong>。参考教程<a href="https://blog.csdn.net/m0_43401436/article/details/107191688">hexo博客中插入图片失败——解决思路及个人最终解决办法_hexo 文章插入图片失败-CSDN博客</a> 。</p>
<ol>
<li>还有一种方法是可以试一下不适用images 的插件，改为使用img的插件，全称是npm install hexo-asset-img –save，亲测有用。记得把插件目录下的images删了。这个问题是hexo版本更新导致的。可以尝试一下。</li>
</ol>
</li>
<li><p>也可以使用其他的图床网站上传图片，然后点击markdown格式就可以复制图片路径，再用markdown语法粘贴即可。</p>
</li>
</ol>
<h2 id="测试系列文章"><a href="#测试系列文章" class="headerlink" title="测试系列文章"></a>测试系列文章</h2><ol class="series-items"><li><a href="/2024/06/12/hexo%E5%9F%BA%E7%A1%80_%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/" title="hexo博客创建">hexo博客创建</a></li><li><a href="/2024/06/10/hexo%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95/" title="hexo博客测试与更新">hexo博客测试与更新</a></li></ol>



<p>注意：hexo会自动给分级标题编号，不需要自己添加</p>
<ul>
<li>md开头的格式可以参考此，细节可以看此文档<a href="https://butterfly.js.org/posts/dc584b87/#Post-Front-matter">Butterfly 安裝文檔(二) 主題頁面 | Butterfly</a></li>
<li>注意:top-img: 图片格式是地址，可以导入网站的地址。</li>
<li>相关图片上传必备网站<a href="https://smms.app/">Image Upload - SM.MS - Simple Free Image Hosting (smms.app)</a></li>
<li>使用，将图片上传到这里，然后点击Image URL 复制地址即可远程连接</li>
</ul>
<h2 id="banner设置"><a href="#banner设置" class="headerlink" title="banner设置"></a>banner设置</h2><ul>
<li><p>网站上方的“标签””分类“”清单“对应blog&#x2F;source&#x2F;英文名&#x2F;index.md 具体写法见</p>
</li>
<li><p>友情链接可以自定义：方法见<a href="https://butterfly.js.org/posts/dc584b87/#%E5%8F%8B%E6%83%85%E9%8F%88%E6%8E%A5%E6%B7%BB%E5%8A%A0">Butterfly 安裝文檔(二) 主題頁面 | Butterfly</a></p>
</li>
<li><p>导航栏设置：在_config.butterfly.yml 文件中搜索menu, 注意格式要和下面的一样，可以自行设置。  图标（就是||后面的内容）在这里<a href="https://fontawesome.com/v4/icons/">Font Awesome Icons</a>_ 搜索然后复制class&#x3D; “ 复制这里的内容” 替代即可。</p>
</li>
</ul>
<h2 id="文章设置"><a href="#文章设置" class="headerlink" title="文章设置"></a>文章设置</h2><ul>
<li><p>當主題配置文件中的 highlight_shrink 設為false時，可在front-matter添加highlight_shrink: true來單獨配置文章收縮代碼框。我这里默认是展开所有代码，需要的时候就在md文件开头添加这句话即可。</p>
</li>
<li><p>tab演示</p>
</li>
</ul>
<div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">test1 1</button><button type="button" class="tab">test1 2</button><button type="button" class="tab">test1 3</button></div><div class="tab-contents"><div class="tab-item-content active"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>


<ul>
<li>按钮button设置</li>
<li><a class="btn-beautify [color] [style] [layout] [position] [size]" href="/%5Burl%5D" title="[text]"><i class="[icon]"></i><span>[text]</span></a></li>
<li>[url]         : 鏈接</li>
<li>[text]        : 按鈕文字</li>
<li>[icon]        : [可選] 圖標</li>
<li>[color]       : [可選] 按鈕背景顔色 （默認style時） 按鈕字體和邊框顔色(outline時) default&#x2F;blue&#x2F;pink&#x2F;red&#x2F;purple&#x2F;orange&#x2F;green</li>
<li>[style]       : [可選] 按鈕樣式 默認實心 outline&#x2F;留空</li>
<li>[layout]      : [可選] 按鈕佈局 默認為line   block&#x2F;留空</li>
<li>[position]    : [可選] 按鈕位置 前提是設置了layout為block 默認為左邊  center&#x2F;right&#x2F;留空</li>
<li>[size]        : [可選] 按鈕大小  larger&#x2F;留空</li>
</ul>
<div class="btn-center">
<a class="btn-beautify outline larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify outline blue larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify outline pink larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify outline red larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify outline purple larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify outline orange larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify outline green larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
</div>

<ul>
<li><p>文字高亮</p>
</li>
<li><mark class="hl-label color">text</mark> ,颜色可选default/blue/pink/red/purple/orange/green
<mark class="hl-label red">红色</mark>
</li>
<li><p>系列文章</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% series %&#125;</span><br><span class="line">&#123;% series [series name] %&#125;</span><br><span class="line">//在文章的 front-matter 上添加參數 series，並給與一個標識</span><br><span class="line">//使用此標簽外掛，會把相同標識的文章以列表的形式展示</span><br></pre></td></tr></table></figure>

</li>
<li><p>其他（如渲染乐谱\链接等可以看<a href="https://butterfly.js.org/posts/4aa8abbe/#flink%EF%BC%89">https://butterfly.js.org/posts/4aa8abbe/#flink）</a></p>
</li>
<li><p>主页的html在文件.deploy_git&#x2F;index.html里面，要更改文字的话在这里更改。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>测试</tag>
        <tag>教程</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客创建</title>
    <url>/2024/06/12/hexo%E5%9F%BA%E7%A1%80_%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Hexo 是一个由Nodejs驱动的博客框架，支持 Markdown、一键部署、插件和多种模板引擎。Hexo 可以让你轻松创建、管理和部署你的个人或团队博客。本文基于个人的实践经验，<strong>以Windows为主要开发环境</strong>，旨在让那些对博客搭建感兴趣但碍于困难的朋友能搭建起基本的博客框架。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="课前提醒——主要是针对非程序员"><a href="#课前提醒——主要是针对非程序员" class="headerlink" title="课前提醒——主要是针对非程序员"></a>课前提醒——主要是针对非程序员</h2><p><strong>大部分的操作、代码输入</strong>都是在<strong>Windows</strong>系统<strong>终端</strong>中执行的。</p>
<p><strong>方法</strong>：点击开始-搜索“终端”-打开，或者在任意文件夹中“右键”-“在终端中打开”。会出现黑色的框。后续大部分代码都是在这“黑框”中输入且执行的。</p>
<p><img src="/2024/06/12/hexo%E5%9F%BA%E7%A1%80_%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/1.png"></p>
<ul>
<li>代码块没有标明代码语言的都是在Windows终端中运行的。mac系统和linux系统相关指令请查询有关资料</li>
<li>默认电脑下载了git和注册了github。没有注册github和下载git的可以看这个<a href="https://www.bilibili.com/video/BV1o5411j7up/?buvid=XY8FE9283F9E25662FCF4765F2CEBCB3B2141&from_spmid=main.space-search.0.0&is_story_h5=false&mid=ueF2Y5ca46qLJ+0TtsIVXA==&p=2&plat_id=116&share_from=ugc&share_medium=android&share_plat=android&share_session_id=26f5f2ef-15df-4762-87af-a60e30f96419&share_source=COPY&share_tag=s_i&spmid=united.player-video-detail.0.0&timestamp=1718194497&unique_k=7ayW8ON&up_id=456828781&vd_source=9d7958a1b86a1d76c255b26c5fa353b7">github入门及如何提交代码-清晰版本_哔哩哔哩_bilibili</a></li>
<li>默认会“科学上网”，不会的可以参考此大佬的教程<a href="https://mubu.com/doc/5OeZGO2XKgh">搭建个人博客网站 - 幕布 (mubu.com)</a>，可以在他的博客中搜索”搭建个人博客“   <a href="https://starlike-daydream.github.io/Cesteo.github.io/">Ceasteo’s Blog</a>。按照此大佬的方法也可以实现简单的hexo博客创建。<strong>注意大佬文档中的淘宝镜像已经失效,请换成<a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a></strong></li>
</ul>
<h2 id="相关资料下载"><a href="#相关资料下载" class="headerlink" title="相关资料下载"></a>相关资料下载</h2><ol>
<li><a href="https://nodejs.cn/">Node.js 中文网 (nodejs.cn)</a>安装，进去后点击下载安装，选择长期支持版（LTS）即可</li>
</ol>
<p><img src="/2024/06/12/hexo%E5%9F%BA%E7%A1%80_%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/2.png"></p>
<ol start="2">
<li>安装cnpm并配置淘宝镜像</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/12/hexo%E5%9F%BA%E7%A1%80_%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/3.png"></p>
<blockquote>
<p><strong>注意</strong>：后面代码中我打&#x2F;&#x2F;并且后面跟着文字的（比如&#x2F;&#x2F;这里是初始化)都是<strong>注释</strong>，<strong>不要写在终端里面</strong></p>
</blockquote>
<ol start="3">
<li>测试cnpm是否安装</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm -v   </span><br></pre></td></tr></table></figure>

<p><strong>v</strong>：version 版本的意思</p>
<ol start="4">
<li>安装hexo博客框架</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>测试hexo博客框架是否安装</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<h2 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h2><blockquote>
<p>后续可以通过blog文件(<strong>shift+鼠标右键-在终端中打开</strong>）直接进入终端，也可以用Visual Studio Code将此文件打开并创建终端（建议使用vscode，后续博客维护很方便）。</p>
</blockquote>
<ol start="6">
<li>在空文件夹（我这里事先创建并将其命名为temp)中初始化hexo博客框架,然后通过cd指令进入此目录。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//示例：cd .\Desktop\temp\</span><br><span class="line">hexo init</span><br><span class="line">//如果报错的话就输入cnpm install 然后再输入hexo s即可</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>启动博客  start   用来预览修改后的博客 按ctrl+c即可停止运行。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>清除博客内容</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean  //或者hexo cl</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>生成博客内容</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p><strong>我这里只讲解部署到github的思路</strong>，部署到其他平台或者服务器请自行查询有关资料。没有注册github和git的可以看这个<a href="https://www.bilibili.com/video/BV1o5411j7up/?buvid=XY8FE9283F9E25662FCF4765F2CEBCB3B2141&from_spmid=main.space-search.0.0&is_story_h5=false&mid=ueF2Y5ca46qLJ+0TtsIVXA==&p=2&plat_id=116&share_from=ugc&share_medium=android&share_plat=android&share_session_id=26f5f2ef-15df-4762-87af-a60e30f96419&share_source=COPY&share_tag=s_i&spmid=united.player-video-detail.0.0&timestamp=1718194497&unique_k=7ayW8ON&up_id=456828781&vd_source=9d7958a1b86a1d76c255b26c5fa353b7">github入门及如何提交代码-清晰版本_哔哩哔哩_bilibili</a></p>
<ol start="10">
<li>github创建仓库,注意格式严格为    你的github用户名.github.io 并复制SSH的clone地址，我这里以Tom为例</li>
</ol>
<p><img src="/2024/06/12/hexo%E5%9F%BA%E7%A1%80_%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/4.png"></p>
<ol start="11">
<li>安装部署插件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<ol start="12">
<li>修改_config.yml文件</li>
</ol>
<p><img src="/2024/06/12/hexo%E5%9F%BA%E7%A1%80_%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/5.png"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">//一般是最后一行。</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">粘贴你10步复制的地址。</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<ol start="13">
<li>部署到github</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<ol start="14">
<li><p>13步后有的会提示输入github账号密码，没有就跳过14和15步</p>
</li>
<li><p>分别输入用户名与密码。</p>
</li>
</ol>
<p>输入密码之后报错并<strong>提醒你github已经停止使用密码登录</strong>，需要用密钥或者是ssh，这里我采用ssh的方式。</p>
<ol start="16">
<li>初始化用户名与邮箱(“yourname”和”youremail“改成你之前注册github设置的)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot; //（注意user.name/email和英文双引号&quot;之间要有一个空格）</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>

<ol start="17">
<li>确认是否设置成功</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//用户名与邮箱</span><br><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure>

<ol start="18">
<li>下载github部署插件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<ol start="19">
<li>本地生成密钥</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;（这里改为16步你设置的邮箱）</span><br></pre></td></tr></table></figure>

<ol start="20">
<li>获取你生成的密钥，并复制返回的结果</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<ol start="21">
<li><p><strong>登录github</strong>, 点击头像——settings——点击SSH and GPG keys-再点击New SSH key,自己取一个标题,然后将复制的密钥粘贴到”key”文本框内并提交（Add SSH key)。</p>
</li>
<li><p>验证：</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<ol start="23">
<li>再次提交</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<ol start="24">
<li>运行并检验是否成功</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s   //或者在浏览器URL栏输入“你的github用户名.github.io”，验证是否已经部署。</span><br></pre></td></tr></table></figure>

<p>至此你已经成功部署一个简单的hexo博客，恭喜你我的朋友(^o^)&#x2F;~，<strong>但这只是伟大征程的第一步，这是结束也是开始</strong>……</p>
<h1 id="博客维护"><a href="#博客维护" class="headerlink" title="博客维护"></a>博客维护</h1><h2 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h2><p>主题、文章修改之后要重新生成并部署。<br>简单讲解：</p>
<ol>
<li><code>hexo cl</code> 将之前上传的清除</li>
<li><code>hexo g</code> 生成框架 </li>
<li><code>hexo s</code> 将其打开在主机上</li>
<li><code>hexo d</code> 提交到github上</li>
</ol>
<blockquote>
<p>总结：<strong>最重要的是第2,4个代码（部分插件使用需要第一个代码，这样通过你的用户名.github.io打开的博客才会更改。</strong></p>
</blockquote>
<h2 id="md文件"><a href="#md文件" class="headerlink" title="md文件"></a>md文件</h2><p><strong>命令行创建md文件</strong><br><code>hexo n &quot;博客文章名&quot;</code>， <strong>必须先进入到文件中才能使用</strong>，会自动在 你所创建的文件夹\source_posts\博客文件名.md  路径下创建一个md文件。</p>
<p><strong>md文件保存位置</strong><br>一般就在&#x2F;_ posts 文件下创建md文件即可（或者把md文件移动到这里），要在开头加上如下语句即可.<strong>注意冒号后面要留空格</strong></p>
<p><strong>示例格式如下</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&lt;! -- 这里是html的注释 写的时候不要添加 - - &gt;</span><br><span class="line">title: 我的第一篇博客文章</span><br><span class="line">date: 2024-06-01  19:10:34</span><br><span class="line">tags: C++</span><br><span class="line">no<span class="emphasis">_valine: true&lt;!- - 关闭评论- - &gt;</span></span><br><span class="line"><span class="emphasis">comments: 是否开启评论(true or false)</span></span><br><span class="line"><span class="emphasis">top: &lt;!- - 文章置顶true- - &gt;</span></span><br><span class="line"><span class="emphasis">no_</span>word<span class="emphasis">_count: true&lt;!- -关闭字数统计- - &gt;</span></span><br><span class="line"><span class="emphasis">password: &lt;! - -如果加密，这里填写密码 - - &gt;</span></span><br><span class="line"><span class="emphasis">reward: true&lt;!- - 当前文章是否开启打赏 - - &gt;</span></span><br><span class="line"><span class="emphasis">copyright: true&lt;!- - 当前文章是否开启版权声明 - - &gt;</span></span><br><span class="line"><span class="emphasis">categories: &lt;! - -如下，分类2是分类1的子分类- - &gt;</span></span><br><span class="line"><span class="emphasis">- [分类1，子分类1]</span></span><br><span class="line"><span class="emphasis">- [分类1，子分类2]</span></span><br><span class="line"><span class="emphasis">- [分类2]</span></span><br><span class="line"><span class="emphasis">tags: </span></span><br><span class="line"><span class="emphasis">- 标签1</span></span><br><span class="line"><span class="emphasis">- 标签2</span></span><br></pre></td></tr></table></figure>

<h2 id="插件下载与使用"><a href="#插件下载与使用" class="headerlink" title="插件下载与使用"></a>插件下载与使用</h2><p><strong>提醒：少即是多, 避免华而不实。</strong></p>
<p>打开官方文档<a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a>，点击插件，点击中意的插件，按照作者的教程去配置插件</p>
<p><strong>举例</strong><br><strong>DPlayer插件</strong></p>
<p><strong>播放代码</strong><br><code>&#123;% dplayer "url=" "pic=" "theme=#FADFA3" "autoplay=false" "mutex=true" %&#125;</code></p>
<p><strong>示例</strong><br>打开对应视频资源网页版（这里以b站为例），鼠标移动到分享-“嵌入代码”，将代码复制到md文件里面，如果需要调整大小，可添加<code>height=450 width=600</code> ,根据需要调整即可</p>
<h2 id="主题的下载与使用"><a href="#主题的下载与使用" class="headerlink" title="主题的下载与使用"></a>主题的下载与使用</h2><p><strong>安装思路同插件</strong><br>注意在themes界面中可以点击“visit preview site”预览主题。</p>
<ol>
<li>看作者介绍如何安装，一步步安装  ，复杂一点的主题还有一系列插件安装</li>
<li>打开根目录下的_config.yml  将theme: 以前的主题 改为 theme: 现在的主题</li>
<li>后续的改动都是要基于作者文档。熟悉前端开发的朋友可以用“<strong>检查</strong>“了解作者网页的结构，然后自行修改</li>
</ol>
<p><strong>推荐主题</strong>：</p>
<ul>
<li>极简风格：<ul>
<li>yilia-plus：<a href="https://github.com/JoeyBling/hexo-theme-yilia-plus">一个简洁优雅的hexo主题</a></li>
</ul>
</li>
<li>优雅又实用：<ul>
<li>butterfly：<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安裝文檔(一) 快速開始 | Butterfly</a></li>
<li>matery：<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery&#x2F;README_CN.md</a></li>
</ul>
</li>
</ul>
<h1 id="Hexo进阶-butterfly主题安装及其定制化"><a href="#Hexo进阶-butterfly主题安装及其定制化" class="headerlink" title="Hexo进阶-butterfly主题安装及其定制化"></a>Hexo进阶-butterfly主题安装及其定制化</h1><blockquote>
<p>我目前安装的是4.13版本的，最新版本是5.20。后续升级</p>
</blockquote>
<p>虽然主菜单栏里面可以分成多个子菜单，但是似乎每一个子菜单只能放一个md文件，所以<u>建议此md文件作为某一类型的东西的索引来呈现。</u></p>
<p>所有的博客md文件都需要放在_post文件夹里面，其他地方大多只能放索引md文件。</p>
<p>建议修改的使用经常使用Hexo s命令，修改无误之后再提交。</p>
<p><strong>To be continue……</strong></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇文章主要侧重于基础的hexo博客搭建，至于进阶的hexo主题搭建和插件安装，限于笔者能力难以展开，有兴趣的读者可以去官方文档找对应的资料，按照作者的文档去安装。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><strong>官方网站</strong>：<a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p>
<p><strong>其他人的教程</strong>：<a href="https://mubu.com/doc/5OeZGO2XKgh">搭建个人博客网站 - 幕布 (mubu.com)</a></p>
<p>git和github<strong>下载和使用</strong>：<a href="https://www.bilibili.com/video/BV1o5411j7up/?buvid=XY8FE9283F9E25662FCF4765F2CEBCB3B2141&from_spmid=main.space-search.0.0&is_story_h5=false&mid=ueF2Y5ca46qLJ+0TtsIVXA==&p=2&plat_id=116&share_from=ugc&share_medium=android&share_plat=android&share_session_id=26f5f2ef-15df-4762-87af-a60e30f96419&share_source=COPY&share_tag=s_i&spmid=united.player-video-detail.0.0&timestamp=1718194497&unique_k=7ayW8ON&up_id=456828781&vd_source=9d7958a1b86a1d76c255b26c5fa353b7">github入门及如何提交代码-清晰版本_哔哩哔哩_bilibili</a></p>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>有的朋友会说这也太难了吧，确实对于零基础的小白配置一个复杂的博客主题绝非易事，但是我想用王安石的一句话共勉想要变得更强、超越自我的朋友。<br><strong>“而世之奇伟、瑰怪、非常之观，常在于险远，而人之所罕之焉，故非有志者不能之也。”</strong></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>教程</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>《高质量C、C++》笔记整理</title>
    <url>/2024/06/25/%E3%80%8A%E9%AB%98%E8%B4%A8%E9%87%8FC%E3%80%81C++%E3%80%8B%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>本文章会随着编程能力的提高和思维的扩展不断更新,目前是1.0版本    2024&#x2F;6&#x2F;25</p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本书以高质量编写C&#x2F;C++代码为主题，在代码风格等方面列举了常见的规则和示例，旨在帮助读者写出风格统一的、可读性强的、易于维护的代码。</p>
<h1 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h1><blockquote>
<p>什么是优秀的、高质量的代码?</p>
</blockquote>
<ul>
<li>优秀的编程风格</li>
<li>有出错处理</li>
<li>算法复杂度分析</li>
</ul>
<h2 id="文章结构"><a href="#文章结构" class="headerlink" title="文章结构"></a>文章结构</h2><h3 id="版权与版本的声明"><a href="#版权与版本的声明" class="headerlink" title="版权与版本的声明"></a>版权与版本的声明</h3><p><strong>版权和版本的声明</strong>:<br>位于<strong>头文件</strong>(.h)和<strong>定义文件</strong>(.cpp或者.c)的开头,主要内容有：</p>
<ul>
<li>版权信息.</li>
<li>文件名称,标识符,摘要.</li>
<li>当前版本号,作者&#x2F;修改者,完成日期.</li>
<li>版本历史信息.</li>
</ul>
<p><strong>示例1-1</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Copyright(c)200l,上海贝尔有限公司网络应用事业部</span></span><br><span class="line"><span class="comment">* All rights reserved.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 文件名称：filename.h</span></span><br><span class="line"><span class="comment">* 文件标识：见配置管理计划书</span></span><br><span class="line"><span class="comment">* 摘　要：简要描述本文件的内容</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 当前版本：1.1</span></span><br><span class="line"><span class="comment">* 作者：输入作者(或修改者)名字</span></span><br><span class="line"><span class="comment">*完成日期：2001年7月20日</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 取代版本：1.0</span></span><br><span class="line"><span class="comment">＊原作者：输入原作者(或修改者)名字</span></span><br><span class="line"><span class="comment">* 完成日期：2001年5月10日</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="头文件的结构"><a href="#头文件的结构" class="headerlink" title="头文件的结构"></a>头文件的结构</h3><ul>
<li>头文件开头处的版权和版本声明(参见示例1-1).</li>
<li>预处理块.</li>
<li>函数和类结构声明等.</li>
</ul>
<p><strong>规则</strong>;</p>
<ol>
<li>&lt;&gt;导入标准库的头文件,”” 导入非标准库的头文件</li>
<li>头文件只存放<strong>声明</strong>而不放<strong>定义</strong></li>
</ol>
<p><strong>示例1-2</strong> 使用ifndef</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设头文件名称为graphics.h</span></span><br><span class="line"><span class="comment">//版权和版本声明见示例1-1,此处省略.</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> GRAPHICS_H ∥防止graphics.h被重复引用</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GRAPHICS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span> ∥引用标准库的头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myheader.h&quot;</span> ∥引用非标准库的头文件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Functionl</span><span class="params">()</span></span>;<span class="comment">//全局函数声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span> <span class="comment">//类结构声明</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>特点：能跨平台,但是编译时间较长,而且一旦宏名重复就会“不知所措“</p>
<p><strong>示例1-2</strong>  使用#pragma once</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>特点：编译时间短,但是难以跨平台.</p>
<h3 id="定义文件的结构"><a href="#定义文件的结构" class="headerlink" title="定义文件的结构"></a>定义文件的结构</h3><ul>
<li>定义文件开头处的版权和版本声明(参见示例1-1).</li>
<li>对一些头文件的引用.</li>
<li>程序的实现体(包括数据和代码).<br>假设定义文件的名称为graphics.cpp,定义文件的结构参见示例1-3.</li>
</ul>
<p><strong>示例1-3</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//版权和版本声明见示例1-1,此处省略.</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span>“graphics.h”∥引用头文件</span></span><br><span class="line">……</span><br><span class="line"><span class="comment">//全局函数的实现体</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Functionl</span><span class="params">(…)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类成员函数的实现体</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Box::Draw</span><span class="params">(…)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>如果一个软件的头文件数目比较多(如超过十个),通常应将头文件和定义文件分别保存于不同的目录,以便于维护.例如可将头文件保存于include目录,将定义文件保存于source目录(可以是多级目录).</p>
<h2 id="程序的版式"><a href="#程序的版式" class="headerlink" title="程序的版式"></a>程序的版式</h2><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><p><strong>适当留空行保持呼吸感</strong></p>
<p><strong>规则</strong>:</p>
<ul>
<li>在每个类声明之后、每个函数定义结束之后都要加空行.</li>
<li>在一个函数体内,逻揖上密切相关的语句之间不加空行,其它地方应加空行分隔.参见示例2-1</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑连续,不空行</span></span><br><span class="line"><span class="type">int</span> ii = <span class="number">3</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;typeid(int)=&quot;</span> &lt;&lt; <span class="built_in">typeid</span>(<span class="type">int</span>).<span class="built_in">name</span>() &lt;&lt; endl,</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;typeid(ii)=&quot;</span> &lt;&lt; <span class="built_in">typeid</span>(ii).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义函数,前后逻辑不相连,空行</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">power</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码行"><a href="#代码行" class="headerlink" title="代码行"></a>代码行</h3><p><strong>规则</strong></p>
<ul>
<li><strong>一行代码只做一件事情</strong>,如只定义一个变量,或只写一条语句.这样的代码容易阅读,并且方便于写注释.</li>
<li>if、for、while、do等语句自占一行,执行语句不得紧跟其后.<strong>不论执行语句有多少都要加{}</strong>.这样可以防止书写失误.</li>
<li>尽可能<strong>定义变量的同时初始化该变量</strong>.</li>
</ul>
<blockquote>
<p><strong>总而言之一句话,不要一行就写完</strong></p>
</blockquote>
<p><strong>示例2-2</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在定义变量的同时初始化变量</span></span><br><span class="line"><span class="type">int</span> width = <span class="number">10</span>;<span class="comment">//宽度</span></span><br><span class="line"><span class="type">int</span> height = <span class="number">20</span>;<span class="comment">//高度</span></span><br><span class="line"><span class="type">int</span> depth = <span class="number">30</span>;<span class="comment">//深度</span></span><br><span class="line"><span class="comment">//不要写成int width,height,depth;</span></span><br><span class="line"></span><br><span class="line">x  = a +b;</span><br><span class="line">y = c + d;</span><br><span class="line">z = e - f;</span><br><span class="line"><span class="comment">//不要一行就写完</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (width &lt; height)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">dosomething</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不要写成 if() dosomething</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (initialization;condition;update)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">dosomething</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//空行</span></span><br><span class="line"><span class="built_in">other</span>();</span><br></pre></td></tr></table></figure>

<h3 id="代码行内的空格"><a href="#代码行内的空格" class="headerlink" title="代码行内的空格"></a>代码行内的空格</h3><ul>
<li>关键字之后要留空格.象const、virtual、inline、case等关键字之后至少要留一个空格(不留空格一般会报错),否则无法辨析关键字.<strong>象if、for、while等关键字之后应留一个空格</strong>再跟左括号‘(’,以突出关键字.</li>
<li><strong>函数名之后不要留空格</strong></li>
<li>‘(’向后紧跟,<strong>‘)’、‘,’、’‘;’向前紧跟</strong>,紧跟处不留空格.</li>
<li>‘,’之后要留空格,如Function(x,y,z).如果‘;’不是一行的结束符号,其后要留空格,如for(initialization; condition; update).</li>
<li>赋值操作符、比较操作符、算术操作符、逻辑操作符、位域操作符,如“&#x3D;”、“+&#x3D;”“&gt;&#x3D;”、“&lt;&#x3D;”、“+”、“*”、“%”、“&amp;&amp;”、“‖”、“&lt;”,“Λ”等二元操作符的前后应当加空格.(在VS等编译器会自动格式化,但是也要养成良好的习惯)</li>
<li>一元操作符如“”！“~”、“++”、“–”、“&amp;”(地址运算符)等前后不加空格.</li>
<li>象“[]”、“.”、“-&gt;”这类操作符前后不加空格.</li>
<li>对于表达式比较长的for语句和if语句,为了紧凑起见可以适当地去掉一些空格,如for(i&#x3D;0;i&lt;10;i++)和if(a&lt;&#x3D;b)&amp;&amp;(c&lt;&#x3D;d)</li>
</ul>
<p>也就是说：<strong>在有大量操作符或者是关键字的情况下留空格避免过于紧凑</strong>.对于需要紧凑的符号就不要留空(比如&amp;,this等)</p>
<p><strong>示例</strong> 以下皆为优良代码风格</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Funcl</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (year &gt;= <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((a&gt;=b) &amp;&amp; (c&lt;=d))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line"></span><br><span class="line">x = a &lt; b ? a : b;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *x = &amp;y;</span><br><span class="line"></span><br><span class="line">array[<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">a.<span class="built_in">Function</span>();</span><br></pre></td></tr></table></figure>

<h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p><strong>规则简单来说就是{}单独占一行并且同一级的要对齐</strong>.</p>
<p><strong>示例</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; name &lt;&lt; <span class="string">&quot;will make America great again&quot;</span>&lt;&lt; i &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="长行拆分"><a href="#长行拆分" class="headerlink" title="长行拆分"></a>长行拆分</h3><ul>
<li>一行最多70-80字</li>
<li>拆分时将操作符放在首位,要缩进排版</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((very_longer_variablel &gt;very_longer_variablel2)</span><br><span class="line">	&amp;&amp;(very_longer_variable3 &lt;very_longer_variablel4)</span><br><span class="line">	&amp;(very_longer_variable5 &lt;very_longer_variablel6))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dosomething</span>(first_name,</span><br><span class="line">		    last_name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修饰符的位置"><a href="#修饰符的位置" class="headerlink" title="修饰符的位置"></a>修饰符的位置</h3><p>主要是解决多个变量定义时的歧义问题</p>
<p>规则:*与&amp;紧靠变量名</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *name;</span><br><span class="line"><span class="type">int</span> *x,y;<span class="comment">//y不会误解为指针</span></span><br><span class="line"><span class="type">int</span>* x,y;<span class="comment">//y有可能被误解为指针.</span></span><br></pre></td></tr></table></figure>

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p><strong>规则</strong></p>
<ul>
<li>一行用&#x2F;&#x2F;,多行用&#x2F; * * &#x2F;</li>
<li>注释不是文档,需要的时候才加上</li>
<li>边写代码边注释,注意更新</li>
<li>注释要写在所解释的代码的上方或者右方</li>
<li>较长的代码要在结尾处指明是谁的结束.</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span> ()</span><br><span class="line">	&#125;<span class="comment">//end of while</span></span><br><span class="line">	</span><br><span class="line">&#125;<span class="comment">//end of if</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 函数介绍：</span></span><br><span class="line"><span class="comment">* 输入参数：</span></span><br><span class="line"><span class="comment">* 输出参数：</span></span><br><span class="line"><span class="comment">* 返回值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="类的版式"><a href="#类的版式" class="headerlink" title="类的版式"></a>类的版式</h3><p>类的版式主要有关心结构的“以数据为中心”风格和“以行为为中心“风格,这里提倡<strong>“以行为为中心“风格</strong>,毕竟在大部分情况下我们只关心怎样使用,有什么功能,而不会在乎里面是什么.</p>
<p>一句话：<strong>将public类型的函数放在前面,将private的数据放在后面</strong>.</p>
<p><strong>示例</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Funcl</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Func2</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> i,j:</span><br><span class="line">	<span class="type">float</span> x,y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>在实际工作中以<strong>企业的开发手册</strong>为主</p>
<p><strong>规则</strong></p>
<ul>
<li>不要用拼音,不用写完整英文翻译,也不要用中式英语命名</li>
<li>统一命名风格,要么驼峰命名法,要么匈牙利命名法,不要混着用.这里采用驼峰命名法<ul>
<li>扩展：驼峰命名法:</li>
<li><strong>变量</strong>一般用<strong>小驼峰法</strong>标识.驼峰法的意思是：除第一个单词之外,其他单词首字母大写</li>
<li>大驼峰法把<strong>第一个单词的首字母也大写</strong>了.常用于类名,函数名,属性,命名空间</li>
</ul>
</li>
<li>少用易混淆的标识符,比如x与X,o与0</li>
<li>变量的名字(“名词“或者”形容词+名词“)</li>
<li>全局函数的名字(“动词“或者”动词+名词”),类中的函数命名(“动词”),因为”自带”名词.</li>
<li>可以用反义词组表示具有相反意义的变量或者函数(如set与get)</li>
<li>避免数字编号;比如num1;</li>
</ul>
<p><strong>Windows命名规则</strong></p>
<ul>
<li>常量全大写,下划线分割单词.如int  MAX_NUM &#x3D; 100;</li>
<li>静态变量加s_前缀,全局变量加g_前缀,类成员加m_前缀  如int static s_num &#x3D; 100;</li>
<li>对于不同库的变量可以添加反映库特性的前缀,如openGL,用gl_做前缀</li>
</ul>
<h3 id="表达式和基本语句"><a href="#表达式和基本语句" class="headerlink" title="表达式和基本语句"></a>表达式和基本语句</h3><h3 id="运算符的优先级-复合表达式"><a href="#运算符的优先级-复合表达式" class="headerlink" title="运算符的优先级 &amp;&amp; 复合表达式"></a>运算符的优先级 &amp;&amp; 复合表达式</h3><p><strong>规则</strong></p>
<ul>
<li>适当用括号表示运算顺序</li>
<li>不要写复杂、多用途的表达式,除非你是出面试题的考官.比如<code>d = (a=b+c++)+r;</code></li>
</ul>
<h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>规则</p>
<ul>
<li>不要将布尔值或者是0,1值直接进行比较. 比如能写<code>if(flag)</code> 就不要写 <code>if(flag == true)</code> 写<code>if(value == 0)</code> 就不要写<code>if(value == false)</code> 虽然false和0值相等,但是类型不同</li>
<li>浮点数不要用<code>==</code> <code>!=</code> 比较.因为浮点数精度问题</li>
<li>指针一般和NULL比较,或者和nullptr(C++11特性)比较</li>
<li>建议比较的时候将确定的数放在 &#x3D;&#x3D; 之前,防止错写成&#x3D;而无法发觉.</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">10</span> == a)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a=10&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果你写成=会自动给你报错,防止出事</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">10</span> = a)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="循环语句的效率"><a href="#循环语句的效率" class="headerlink" title="循环语句的效率"></a>循环语句的效率</h3><p>规则</p>
<ul>
<li>建议将最长的循环放在内层,减少CPU跨切循环层的次数</li>
<li>逻辑判断最好在循环外面</li>
</ul>
<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不用for循环里面每次都判断条件,提高了效率</span></span><br><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">		<span class="built_in">DoSomething</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">		<span class="built_in">DoOtherthing</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="for循环与switch多分支"><a href="#for循环与switch多分支" class="headerlink" title="for循环与switch多分支"></a>for循环与switch多分支</h3><p>规则</p>
<ul>
<li>不要轻易在for里面改变循环变量</li>
<li>for循环控制变量取值采用前闭后开的方法.能写<code>for (int i = 0;i &lt; 5;i++)</code>  就不要写&#96;for (int i &#x3D; 0;i &lt;&#x3D;4;i++) </li>
<li>每个case都要写break防止case击穿.保留default语句</li>
</ul>
<h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><ul>
<li>慎用goto,用的好能跳出重重封锁(比如嵌套循环),用不好就万劫不复</li>
</ul>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>使用常量的好处在于<strong>一劳永逸,见文知意</strong></p>
<p>规则</p>
<ul>
<li>用常量表示多次出现的数字或者字符串</li>
<li>建议用const代替#define,方便调试.</li>
<li>公开的常量放在头文件中,不公开的放在定义文件中</li>
<li>常量之间有关联的用常量代替而不是用数字</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 100 <span class="comment">/*C语言的宏常量*/</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">100</span>; <span class="comment">//C++语言的const常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> PI = <span class="number">3.14159</span>; <span class="comment">//C++语言的const常量</span></span><br><span class="line"><span class="type">const</span> string NAME = <span class="string">&quot;Lloyd&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NUN = MAX * <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p><strong>类中设计常量</strong><br>不能直接用const,建议使用<strong>枚举</strong></p>
<p><strong>示例</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">enum</span>&#123;SIZE1=<span class="number">100</span>,SIZE2=<span class="number">200</span>&#125;;<span class="comment">//枚举常量</span></span><br><span class="line">	<span class="type">int</span> array_fir[SIZE1];</span><br><span class="line">	<span class="type">int</span> array_sec[SIZE1];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="函数设计"><a href="#函数设计" class="headerlink" title="函数设计"></a>函数设计</h2><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>形参名</p>
<ul>
<li>形参名要写完整不要省,没有就用void</li>
<li>形参的顺序要合理(比如source与destination,除数与被除数)</li>
<li>如果传参是值的话建议用const&amp;,省去复制、构造与析构的过程</li>
<li>形参最好不要超过5个,而且参数最好有确定的类型与数目.</li>
</ul>
<p>返回值</p>
<ul>
<li>任何函数都要有类型,不返回就用void</li>
<li>函数名与返回值在语义方面不要冲突.比如别用getInt这种名字返回char型</li>
<li>对于赋值函数,使用“引用传递”返回对象;对于操作函数,使用“值传递”的方式返回对象.也就是根据实际情况选择<strong>值传递或者引用传递</strong></li>
</ul>
<p>函数</p>
<ul>
<li>函数入口要检查-使用断言assert</li>
<li>函数出口要检查return <ul>
<li>不能返回指向“栈内存”的“指针”或者“引用”</li>
<li>清楚返回的是什么</li>
<li>如果返回的是对象可以直接写 “创建对象并返回” 如: return Entity(s1);  这在效率上比 Entity temp(s1); return temp;要高得多.</li>
</ul>
</li>
<li>函数功能单一、短小精悍、避免记忆、出错处理要清晰</li>
</ul>
<p><strong>断言</strong></p>
<ul>
<li>一般用于<strong>捕捉非法情况</strong>而不是错误情况</li>
<li>防错设计</li>
</ul>
<p> 比较——引用与指针</p>
<ul>
<li>引用是取别名,指针是地址</li>
<li>引用被创建的时候必须初始化(如<code>string&amp; name = m_Name;</code> </li>
<li>引用不能为空;并且引用初始化之后不能改变引用的关系.</li>
</ul>
<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>规则</p>
<ul>
<li>用malloc或new申请内存之后,应该立即检查指针值是否为NULL.防止使用指针值为NULL的内存.</li>
<li>不要忘记为数组和动态内存赋初值.防止将未被初始化的内存作为右值使用.</li>
<li>避免数组或指针的下标越界,特别要当心发生“多1”或者“少1”操作.</li>
<li>动态内存的申请与释放必须配对,防止内存泄漏.</li>
<li><strong>用free或delete释放了内存之后,立即将指针设置为NULL,防止产生“野指针”</strong>.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">	<span class="built_in">assert</span>(p!=<span class="literal">NULL</span>);</span><br><span class="line">	*p = <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">	<span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	p = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="内容复制与比较"><a href="#内容复制与比较" class="headerlink" title="内容复制与比较"></a>内容复制与比较</h3><p>规则</p>
<ul>
<li>数组与字符串等不能轻易用&#x3D;&#x3D; 判断相等(因为&#x3D;&#x3D; 只比较值而没有比较地址),除非重载了运算符</li>
<li>当数组作为函数的参数进行传递时,数组自动退化成同类型的指针</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> b[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(b, a);<span class="comment">//不能用b = a;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(b, a) == <span class="number">0</span>) &#123;&#125;;<span class="comment">// 不能用if(b = a)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//指针</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *a = &amp;num;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(a);</span><br><span class="line"><span class="type">char</span>* p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>) * (len + <span class="number">1</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(p, a);</span><br><span class="line"><span class="comment">//不要用p=a;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(p, a) == <span class="number">0</span>) <span class="comment">// 不要用if(p = a)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Fuction</span><span class="params">(<span class="type">char</span> a[<span class="number">100</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="built_in">sizeof</span>(a)&lt;&lt;endl;<span class="comment">//结果是4而不是100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>free 与delete</p>
<ul>
<li>这“两大护法”并没有把指针干掉,而是释放内存,地址还在(“一屋传三代,人走屋还在_(:з」∠)“)</li>
</ul>
<p>指针的问题</p>
<ul>
<li>指针消亡了,并不表示它所指的内存会被自动释放.</li>
<li>内存被释放了,并不表示指针会消亡或者成了NULL指针.</li>
</ul>
<p>C中的malloc&#x2F;free与C++中的new&#x2F;delete</p>
<ul>
<li>new和delete会自动调用构造或者析构函数(如果有的话),而malloc与free没有</li>
<li>C语言只有malloc与free.</li>
</ul>
<h3 id="内存耗尽问题"><a href="#内存耗尽问题" class="headerlink" title="内存耗尽问题"></a>内存耗尽问题</h3><p>虽然对于32位及以上的系统很难将内存耗尽,但是也需要做好报错处理(不能因为国力强盛就不修长城)</p>
<p>处理方法</p>
<ul>
<li>如果申请的内存为空,用return或者exit(1)终止</li>
<li>或者自定义处理函数 比如try catch</li>
</ul>
<h3 id="函数讲解"><a href="#函数讲解" class="headerlink" title="函数讲解"></a>函数讲解</h3><p><strong>malloc</strong><br>函数原型为:<br><code>void * malloc(size_t size);</code><br>讲解</p>
<ul>
<li>void* 是泛指针,如果要调用的时候要将其显示转换</li>
<li>size是内存大小,一般用sizeof求出</li>
</ul>
<p>使用示例<br><code>int *p = (int*)malloc(sizeof(int)*length);</code></p>
<p><strong>free</strong><br>函数原型为<br><code>void free(void * memblock)</code></p>
<p><strong>new</strong><br>new内置了sizeof、类型转换、类型安全检查等功能,建议多使用</p>
<p><strong>delete</strong><br>不要漏掉[]<br>举例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> []objects;<span class="comment">//正确</span></span><br><span class="line"><span class="keyword">delete</span> objects;<span class="comment">//错误,只删除了objects[0],漏掉了其他</span></span><br></pre></td></tr></table></figure>

<p><strong>心得</strong></p>
<blockquote>
<ol>
<li>越是害怕,越是要勇敢面对它(特指指针),战胜恐惧的最好方法就是面对恐惧,加油,奥利给</li>
<li>犯错不可怕,走过万千路,天堑变通途.</li>
</ol>
</blockquote>
<h2 id="C-高级特性"><a href="#C-高级特性" class="headerlink" title="C++高级特性"></a>C++高级特性</h2><p><strong>重载与覆盖(overload and override)</strong></p>
<p>特征</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>范围</th>
<th>函数名</th>
<th>参数</th>
<th>是否有virtual关键字</th>
</tr>
</thead>
<tbody><tr>
<td>重载</td>
<td>在同一个类中</td>
<td>相同</td>
<td>不同</td>
<td>可有可无</td>
</tr>
<tr>
<td>覆盖</td>
<td>在基类与派生类中</td>
<td>相同</td>
<td>相同</td>
<td>必须有</td>
</tr>
</tbody></table>
<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;cout &lt;<span class="string">&quot;Base:f(int)&quot;</span>&lt;&lt;x &lt;endl;<span class="comment">//f被重载</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">float</span> x)</span></span>&#123;cout &lt;<span class="string">&quot;Base:f(float)&quot;</span>&lt;&lt;x &lt;endl;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g</span><span class="params">(<span class="type">void</span>)</span></span>&#123;cout &lt;<span class="string">&quot;Base:g(void)&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;:</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g</span><span class="params">(<span class="type">void</span>)</span></span>&#123;cout &lt;<span class="string">&quot;Derived:g(void)&quot;</span>&lt;&lt;endl;&#125;<span class="comment">//派生类覆盖原来基类的g函数,一旦后面通过派生类调用g函数,统一都是重写后的函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>错误高发区：隐藏</strong><br>简单来说就是想通过派生类调用基类的函数却发现调用的都是派生类的函数,导致编译失败,在以下情况下会发生</p>
<ul>
<li>派生类的函数与基类的函数同名,但是参数不同</li>
<li>派生类的函数与基类的函数同名,参数相同,但是基类函数没有virtual</li>
</ul>
<p><strong>参数的缺省值</strong><br>缺省值就是默认值(<strong>default</strong>),中文翻译不准确,尽可能使用英文.</p>
<p>规则</p>
<ul>
<li>参数的default值只能出现在函数的声明中</li>
<li>default值从后往前写</li>
</ul>
<p>运算符重载</p>
<p><strong>函数内联</strong>(inline)<br>函数内联具有宏效率,又有效解决了宏无法调试和安全性的问题.<strong>建议在C++中使用内联取代宏</strong>(assert除外)</p>
<p><strong>使用说明</strong></p>
<ul>
<li>inline必须必须<strong>和函数定义体放在一起</strong>才能使函数成为内联函数.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; x,<span class="type">const</span> <span class="type">int</span>&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>特别的：虽然在类中定义的函数自动变成内联函数,但是一般不会在类中定义函数,如果需要内联记得在定义处加上inline.</li>
<li>内联是<strong>用空间换时间</strong></li>
</ul>
<h2 id="类的构造函数、析构函数和赋值函数"><a href="#类的构造函数、析构函数和赋值函数" class="headerlink" title="类的构造函数、析构函数和赋值函数"></a>类的构造函数、析构函数和赋值函数</h2><p>简单示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span> *str = <span class="literal">NULL</span>);<span class="comment">//普通构造函数</span></span><br><span class="line">	<span class="built_in">String</span>(<span class="type">const</span> String &amp;other);/拷贝构造函数</span><br><span class="line">	~<span class="built_in">String</span> (<span class="type">void</span>);<span class="comment">//析构函数</span></span><br><span class="line">	String &amp; operate =(<span class="type">const</span> String &amp;other);<span class="comment">//赋值函数 其实是重载=</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span> *m_data;<span class="comment">//用于保存字符串</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="类的继承与组合"><a href="#类的继承与组合" class="headerlink" title="类的继承与组合"></a>类的继承与组合</h2><p>简单讲解对象(object)、类(class)和实例(instance)的关系<br>对象就是“房子”,类就是设计房子的“蓝图”,对象是类的一个实例,根据“蓝图”可以盖很多的“房子”.<br>所谓<strong>面向对象编程</strong>,就是设计“图纸”.</p>
<p><strong>继承的规则</strong></p>
<ul>
<li>不相关的两个类不要继承(“公若不弃,愿拜为义父”doge)</li>
<li>在逻辑上B是A的一种,并且A的所有属性和功能都对A有意义,就允许B继承A.比如虽然鸵鸟是鸟,但是“飞”的功能对鸵鸟是多余的,这种情况下最好不要继承与鸟</li>
</ul>
<p><strong>组合的规则</strong></p>
<ul>
<li>若在逻辑上A是B的“一部分”(a part of),则不允许B从A派生,而是要用A和其它东西组合出B.比如电池、屏幕和芯片是手机的一部分,就用这些类组合起来生成手机类,而不是让手机“<strong>拜电池等为义父</strong>”</li>
</ul>
<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cell</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">charge</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Look</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chip</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Run</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手机类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">charge</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Look</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Rum</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Cell m_cell;</span><br><span class="line">	Screen m_screen;</span><br><span class="line">	Chip m_chip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编程经验"><a href="#编程经验" class="headerlink" title="编程经验"></a>编程经验</h2><h3 id="常用const"><a href="#常用const" class="headerlink" title="常用const"></a>常用const</h3><p>注意</p>
<ul>
<li>const只能修饰输入参数</li>
<li>对于值传递的参数无需使用const修饰</li>
<li>对于非内部数据类型(就是C|C++标准库之外的类型)的输入参数.可以使用<strong>const 类型&amp;</strong> 的方式在提高效率的同时不改变参数内容.<ul>
<li>比如int确实没必要使用const int &amp;.,内部数据类型没有构造与析构,复制也很快,不需要多此一举</li>
</ul>
</li>
<li>函数返回值如果是值传递,不需要用const修饰</li>
<li>不修改成员属性的函数都要加const</li>
</ul>
<h1 id="个人思考"><a href="#个人思考" class="headerlink" title="个人思考"></a>个人思考</h1><p>写代码就像是写作文,理论上只要表达意思正确(也就是程序能运行并达到理想效果),什么首行缩进、分段都不影响文章的质量,但是作文是要修改的(程序要维护),是要给人看的(别人要使用你的程序),此时语句(代码)就是交流的主要工具,语句的逻辑是什么?怎样表达就能让对方理解?怎样吸引读者阅读你的文章?怎样减少语病与错误?这是我们在写作文的时候经常思考的问题,编程也是一样.</p>
<p>接下来就从写好一篇文章开始讲解代码是什么.首先,写作者的名字,这就引出了“<strong>版权和版本</strong>“的声明,表明作品是你写的,作品处于哪个阶段.然后,给人物取名字,一般老师会让学生用什么典雅的古文等方法给人物取名,不过在计算机这里就不适用了,要简洁直白,能叫”many”就不要用”quite a number of”,又不是给英语作文凑字数(doge)</p>
<p>然后就要开始准备工作了,如果我们写的是人物传记,就要交代人物名字及其相关信息(声明及初始化变量),比如“廉颇者,赵之良将也”,声明一个Person类的变量名为“廉颇”,并将“赵国”“良将”作为参数构造了一个Person的实例对象——人.有的还会在正文之前写时间地点等,比如“元丰六年,余左迁……”(出自《琵琶行》)就是定义(define)”今年“为”元丰六年“,以后所有的”今年“都会被”元丰六年“等效代替.</p>
<p>以下以《廉颇蔺相如列传》第一段为例.</p>
<p>接下来我用“保安三问”(<strong>你是谁?你去哪?你干嘛?</strong>)来讲解如何写代码.</p>
<p>“廉颇者,赵之良将也”.首先,<strong>第一问“廉颇是谁?”</strong> ,我们需要给廉颇一个定义,是人是神还是鬼,是符号还是具体的事物?理论上都可以,但是从复用的角度和理解的角度来看,用“人”更加通俗易懂,即定义成“人”类(class)或者是结构体,这里以面向对象为主要编程思想,采用”类“来构造一个”人“. 然后,声明和定义一个“人”类,由于高质量编程的需要,最好将声明与定义放在不同的文件里面,类比图书放在不同的类别,都是为了后续减少维护成本.但是构造类的过程中有一点问题,类里面应该放点什么东西呢?我的建议是,随着”故事“的展开不断更新”人“类,毕竟人是会成长的,想要一开始一劳永逸只会顾此失彼.</p>
<p><strong>第二问“廉颇去哪?”</strong> 一般来说,所有的代码都直接或者间接在main函数里面.这里的“廉颇”也不例外.</p>
<p><strong>第三问”廉颇干嘛?“</strong> 第一句没有交代廉颇的行为,但是交代了廉颇的”特性“(属性),这就提醒”人“类可以”更新“了,比如添加”国籍(nationality)“、”地位(status)“属性并公开(双料特工可以不公开doge),不过又有问题了,这些属性应该是哪一种变量呢?string、int还是class呢?我的建议是,在日常生活中常以文字出现的用字符串(char[] string等),以数字出现的(比如成绩)用整型(比如int)或者浮点型(比如double).不过仅作参考,<strong>合适的才是最好的</strong>.好了,现在我们给“人”类添加了nationality和status属性,但是我们要“构造”一个“廉颇”啊,不能只把“廉颇”的特性给女娲却不告诉她怎样“玩泥巴”吧,也就是<strong>声明并定义有参构造</strong>(教女娲如何用泥巴塑造廉颇),怎样定义呢?“廉颇”要什么,就给女娲什么,廉颇要名字、要身份、要国籍,就给他名字(m_name &#x3D; name;).现在,“人”类的基本蓝图已经有了,也告诉女娲怎样“捏一个人类“了,接下来就要将廉颇的特性传递给构造函数了.如下,成功创建了”廉颇“.用cout输出一下其特性,完美.</p>
<p>廉颇有了,要<strong>干什么</strong>呢?伐齐！这是一个动作,可以用一个<strong>函数</strong>来表示,那么函数应该是类中的函数还是外面的函数呢(<strong>保安第二问</strong>)?我的建议是,看谁复用性更强,毕竟人都喜欢偷懒,这里用类中的函数,毕竟之后蔺相如”人“也要”攻打“齐国.对于类的定义与实现,也是同理的<strong>保安三问</strong>,是什么?在哪里?干什么?是什么——返回什么类型,要什么参数,名字是什么;在哪里——函数声明与定义在哪里;干什么——实现了什么功能.<strong>不停追问自己,然后不断完善代码</strong>.<strong>伐</strong>字实现了,又到”齐“了,看起来好像是string,又感觉可以是class,用什么比较好呢?我的建议是,从宏观看”齐“的”地位“,即”齐“出现频率高不高,包含的东西多不多,以此配位,从全文来看,”齐“明显是高频词汇,应该重视,string不配修饰”齐“,那就用类(class)吧.同理<strong>保安三问</strong>创建”国家(country)“类.添加防御力(m_defenseValue)和名字(name)属性等.</p>
<p>下一句是“大破之”是结果,但是<strong>过程</strong>是什么呢?也就是结果的“因”是什么呢?这里实现的方法就见仁见智了,可以通过数值的比较,可以是特定的属性触发,甚至可以随机判定输赢,这里就用游戏中常用的“数值”来比较,用判断语句(if)判定.另一个结果是”拜为上卿,以勇气闻於诸侯“,这里强调的属性是”上卿“”闻(出名的意思)“看”人“类中有没有,有一个status,但是没有”出名“的属性,可以添加一个,<strong>根据保安三问定律</strong>,<strong>取</strong>”出名“的属性为int,名字是m_fame,用数值代表出名程度.然后在if中添加结果(将m_fame的值提升,将m_status的值改变),最后根据m_fame的值输出语句.至此,程序完结.</p>
<p><strong>示例如下</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在Person.h中</span></span><br><span class="line"><span class="comment">//定义“人”类.</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Country.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string m_nationality;<span class="comment">//国籍</span></span><br><span class="line">	<span class="type">int</span> m_ability = <span class="number">1</span>;<span class="comment">//能力值 范围1-5 越大能力越强</span></span><br><span class="line">	string m_name;<span class="comment">//名字</span></span><br><span class="line">	string m_status;<span class="comment">//地位</span></span><br><span class="line">	<span class="type">int</span> fame = <span class="number">1</span>;<span class="comment">//名声 范围1-5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//构造</span></span><br><span class="line">	<span class="built_in">Person</span>(<span class="type">void</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//有参构造</span></span><br><span class="line">	<span class="built_in">Person</span>(string name, string nationality, <span class="type">int</span> ability, string status);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//攻击函数</span></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">Attack</span><span class="params">(Country nation)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//析构</span></span><br><span class="line">	~<span class="built_in">Person</span>(<span class="type">void</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在Person.cpp文件中(也就是实现类中)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Person.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Person::<span class="built_in">Person</span>(string name, string nationality, <span class="type">int</span> ability,string status)</span><br><span class="line">&#123;</span><br><span class="line">	m_name = name;</span><br><span class="line">	m_nationality = nationality;</span><br><span class="line">	m_ability = ability;</span><br><span class="line">	m_status = status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person::<span class="built_in">Person</span>(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person::~<span class="built_in">Person</span>(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Person::Attack</span><span class="params">(Country nation)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (m_ability&gt; nation.m_defenseValue)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>“赵惠文王十六年”<br><code>int to_year = 16;</code>  </p>
<p>“廉颇为赵将伐齐” </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在Country.h 文件中</span></span><br><span class="line"><span class="comment">//定义国家类</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Country</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> m_defenseValue = <span class="number">1</span>;<span class="comment">//国家防御力</span></span><br><span class="line">	string m_name;<span class="comment">//国家名字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Country</span>(<span class="type">void</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Country</span>(string name, <span class="type">int</span> defenseValue);</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">Country</span>(<span class="type">void</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在Country.cpp</span></span><br><span class="line"><span class="comment">//国家类实现</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Person.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Person::<span class="built_in">Person</span>(string name, string nationality, <span class="type">int</span> ability,string status)</span><br><span class="line">&#123;</span><br><span class="line">	m_name = name;</span><br><span class="line">	m_nationality = nationality;</span><br><span class="line">	m_ability = ability;</span><br><span class="line">	m_status = status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person::<span class="built_in">Person</span>(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person::~<span class="built_in">Person</span>(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Person::Attack</span><span class="params">(Country nation)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (m_ability&gt; nation.m_defenseValue)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>“大破之,取阳晋,拜为上将,以勇气闻於诸侯”</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.cpp文件里面</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Person.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Country.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义函数库</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//创建“廉颇”与“蔺相如”</span></span><br><span class="line">	<span class="function">Person <span class="title">LianPo</span><span class="params">(<span class="string">&quot;廉颇&quot;</span>, <span class="string">&quot;Zhao&quot;</span>, <span class="number">5</span>,<span class="string">&quot;良将&quot;</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">LiXiangRu</span><span class="params">(<span class="string">&quot;蔺相如&quot;</span>, <span class="string">&quot;Zhao&quot;</span>, <span class="number">5</span>, <span class="string">&quot;舍人&quot;</span>)</span></span>;</span><br><span class="line">	<span class="comment">//输出“廉颇”的基本信息</span></span><br><span class="line">	cout &lt;&lt; LianPo.m_name &lt;&lt; <span class="string">&quot;者,&quot;</span> &lt;&lt; LianPo.m_nationality &lt;&lt; <span class="string">&quot;之&quot;</span> &lt;&lt; LianPo.m_status &lt;&lt; <span class="string">&quot;也&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//创建齐国</span></span><br><span class="line">	<span class="function">Country <span class="title">Qi</span><span class="params">(<span class="string">&quot;qi&quot;</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">	<span class="comment">//赵惠王十六年</span></span><br><span class="line">	<span class="type">int</span> to_year = <span class="number">16</span>;</span><br><span class="line">	<span class="comment">//廉颇为赵将伐齐</span></span><br><span class="line">	<span class="type">bool</span> ret = LianPo.<span class="built_in">Attack</span>(Qi);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; LianPo.m_name &lt;&lt; <span class="string">&quot;对&quot;</span> &lt;&lt; Qi.m_name &lt;&lt; <span class="string">&quot;发起攻击&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//判断讨伐是否成功</span></span><br><span class="line">	<span class="keyword">if</span> (ret)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;大破之&quot;</span> &lt;&lt; endl;</span><br><span class="line">		LianPo.m_status = <span class="string">&quot;上卿&quot;</span>;</span><br><span class="line">		cout &lt;&lt; LianPo.m_name &lt;&lt; <span class="string">&quot;被拜为&quot;</span> &lt;&lt; LianPo.m_status &lt;&lt; endl;</span><br><span class="line">		LianPo.fame = <span class="number">4</span>;</span><br><span class="line">		<span class="comment">//判断名声等级</span></span><br><span class="line">		<span class="keyword">if</span> (LianPo.fame &gt;= <span class="number">4</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;以勇气闻於诸侯&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>看到这里,你会有一个问题,为什么要用写作来形容代码的编写过程呢?对以中文为母语的人可能难以理解,但是对于以英语为母语的人早已习以为常,甚至达到了“美国人刚出生就会写代码”的程度.对他们来说,写代码就是写英语作文,无非是语法更严格,字数变更少,语句更加讲逻辑,对我们来说就是在“写天书”.这里想说的是,将写代码看做是写英语作文,可以<strong>有效提高写代码的逻辑性</strong>,而且,一旦你认为自己写的是一篇作文,要传阅给所有人看,你就会不自觉“美化”你的作文(代码),<strong>在无形之中,你对自己写的作文(代码)提高了要求</strong>。我以写作为例,更多的是想让你感受一下<strong>保安三问定律</strong>在写代码方面的作用和按照一定的规则写代码的好处,毕竟代码就是语句,多行代码构成段落,多个段落构成故事,<strong>故事都有起因经过结果,保安定律就是为了回答这三者究竟是什么，规则限定我们写故事写在哪，怎样写易读性更强</strong>。也许自己的故事有缺陷,也许编程能力有限,但总是能引导我们走向文章的结尾,给老师(编译器)和他人一个满意的答卷.</p>
<ol class="series-items"><li><a href="/2024/06/25/%E3%80%8A%E9%AB%98%E8%B4%A8%E9%87%8FC%E3%80%81C++%E3%80%8B%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/" title="《高质量C、C++》笔记整理">《高质量C、C++》笔记整理</a></li></ol>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>《高质量C、C++》 林锐</li>
<li>《C++ Prime Plus(第六版)》</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析工具superset安装和使用(version:0.381)</title>
    <url>/2024/09/16/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7superset/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>superset是一个开源的现代数据探索和可视化平台。目前属于Apache孵化器项目，主要用于数据分析师进行数据可视化工作,</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><blockquote>
<p>注意：superset官网<a href="https://superset.apache.ac.cn/docs/intro/">简介 | Superset 中文 (apache.ac.cn)</a> 推荐使用docker安装，而以下教程是手动配置环境，建议不熟悉开发环境的用docker安装(我再也不手动配置了o(╥﹏╥)o)</p>
</blockquote>
<ul>
<li>事先安装centos7(或者有一个服务器)并且安装好mysql</li>
<li>主要参考视频教程和资料<ul>
<li>【尚硅谷大数据Superset教程（数据仓库项目首选数据可视化平台）】<a href="https://www.bilibili.com/video/BV1SL4y1a7WK?p=10&vd_source=bb8dacb993f11c0e39f8147c98a2894c">https://www.bilibili.com/video/BV1SL4y1a7WK?p=10&amp;vd_source=bb8dacb993f11c0e39f8147c98a2894c</a></li>
<li><a href="https://blog.csdn.net/m0_46914845/article/details/125868049#comments_26566111">数据仓库工具superset安装（完全可用）-CSDN博客</a></li>
</ul>
</li>
</ul>
<h1 id="基本环境配置"><a href="#基本环境配置" class="headerlink" title="基本环境配置"></a>基本环境配置</h1><ol>
<li>尚硅谷的视频先从P1看到P2，一步步按照视频讲的方法做即可</li>
<li>然后就要开始创建Python环境，注意这里根据我个人实操和网络上帖子的经验，3.7、3.8的环境都有问题，我尝试过3.9，但是在最后启动superset的时候总是无法访问。这里就不要完全照抄视频，而是要根据此博客<a href="https://blog.csdn.net/m0_46914845/article/details/125868049#comments_26566111">数据仓库工具superset安装（完全可用）-CSDN博客</a> ，建议安装3.6版本的Python，按照步骤做到第六步。</li>
<li>然后注意将命令中所有的<code>https://pypi.douban.com/simple/</code> 改成 <code>https://pypi.tuna.tsinghua.edu.cn/simple</code></li>
<li>执行后发现没有安装pip和wheel，查看此<a href="https://blog.csdn.net/qq_15098623/article/details/90905230">centos 如何安装 pip（解决No package python-pip available问题）_no package python37 available-CSDN博客</a> 安装好</li>
<li>在执行第九步的时候输入命令可以加上 <code>-i https://pypi.tuna.tsinghua.edu.cn/simple</code>加快下载速度</li>
<li>在执行第十步的时候发现缺少模块 输入 <code>pip install --upgrade cryptography==3.2 -i https://pypi.tuna.tsinghua.edu.cn/simple</code>  安装</li>
<li>后面基本上就是照着做了，注意–bind：绑定本机地址 ，绑定的是你服务器的IP地址</li>
<li>环境安装好之后就可以看尚硅谷的视频继续学了。</li>
</ol>
<h1 id="superset使用指南"><a href="#superset使用指南" class="headerlink" title="superset使用指南"></a>superset使用指南</h1><p>待更新……</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>英语口语(英语兔版)</title>
    <url>/2024/10/13/%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD(%E8%8B%B1%E8%AF%AD%E5%85%94%E7%89%88)/</url>
    <content><![CDATA[<h1 id="英语口语"><a href="#英语口语" class="headerlink" title="英语口语"></a>英语口语</h1><p>💡不要用中文去替代英文中独有的，但是中文中缺失的音。</p>
<h1 id="三种常用的音标"><a href="#三种常用的音标" class="headerlink" title="三种常用的音标"></a>三种常用的音标</h1><p>国际音标(IPA):</p>
<p>KK音标：主要是美式音标，方便美式英语的注音。</p>
<p>DJ音标：主流音标，口语练习的主要音标。<strong>本文后面不加说明的都是练习的DJ音标(IPA88)</strong></p>
<p>对于非英语专业或者是语言研究的人来说，我们只需要在学习音标的是能认出这是属于哪一类的音标即可，音标终究是用来帮助发音的。</p>
<h1 id="全部音标发音"><a href="#全部音标发音" class="headerlink" title="全部音标发音"></a>全部音标发音</h1><p>视频如下。</p>
<iframe src="//player.bilibili.com/player.html?isOutside=true&aid=552211531&bvid=BV1vi4y1C73C&cid=547518386&p=1&autoplay=0" width="785.8" height="523" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>



<h1 id="发音讲解"><a href="#发音讲解" class="headerlink" title="发音讲解"></a>发音讲解</h1><p><strong>以元音和辅音分</strong>：</p>
<p>元音：就是在发音时不受阻碍(如嘴唇张开，但还是会受到舌头的影响)发出的音。辅音与元音相反。注意这里的舌位指的是舌头在发音时隆起的最高点，舌头太高，舌位就高。</p>
<p>影响元音三要素：圆唇度(嘴巴”o“的程度)，舌位高低，舌位前后。</p>
<p><strong>以清音和浊音分</strong>：<br>清音与浊音：声带不振动的音就是清音。反之就是浊音。</p>
<p>示意图如下</p>
<table>
<thead>
<tr>
<th></th>
<th>元音</th>
<th>辅音</th>
</tr>
</thead>
<tbody><tr>
<td>浊音</td>
<td>粗略认为所有的元音都是浊元音</td>
<td>浊辅音</td>
</tr>
<tr>
<td>清音</td>
<td>\</td>
<td>清辅音</td>
</tr>
</tbody></table>
<h2 id="元音"><a href="#元音" class="headerlink" title="元音"></a>元音</h2><blockquote>
<p>以下都是DJ音标</p>
</blockquote>
<h3 id="单元音"><a href="#单元音" class="headerlink" title="单元音"></a>单元音</h3><p>注意：后面在音标中的的：不是其正确写法，只是markdown文件难以展现，具体写法还是见参考部分的第一个链接，后面的也是这样。</p>
<ul>
<li><strong>&#x2F;i:&#x2F;</strong></li>
</ul>
<p>bee、fee、pea、read、meat、lead</p>
<p>发音时不圆唇，注意舌位更高，嘴角要向两边拉开，带点微笑的感觉。</p>
<ul>
<li><strong>&#x2F;ɪ&#x2F;</strong></li>
</ul>
<p>bit、fit、pit、lit、hit、fish</p>
<p>注意舌位更低，舌尖在下齿后方，比&#x2F;i:&#x2F;更放松，嘴角没有那么咧开。</p>
<p>注意区分，它<strong>不仅仅是把&#x2F;i:&#x2F;的时长缩短</strong>，有些美国人发音舌位会更低。有点像是军训时教官说的“一”。</p>
<ul>
<li><strong>&#x2F;u:&#x2F;</strong></li>
</ul>
<p>too、food、loose、prove、moon、soon</p>
<p>&#x2F;u:&#x2F;<strong>口型没有那么圆,而是更扁</strong>,嘴角向两边拉伸，发音部位靠口腔后部。(不要误发成yu)</p>
<ul>
<li><strong>&#x2F;ʊ&#x2F;</strong></li>
</ul>
<p>book、look、good、took、bush、would</p>
<p>发&#x2F;ʊ&#x2F;时,嘴唇没那么撅，更放松时长更短,发音更靠后。&#x2F;ʊ&#x2F;并不仅仅是把长音&#x2F;u:&#x2F;短着读，&#x2F;u:&#x2F;的唇形像两边拉开,而&#x2F;ʊ&#x2F;唇形更圆,更放松。</p>
<ul>
<li><strong>&#x2F;e&#x2F;</strong></li>
</ul>
<p>bed、get、pet、let、met、set</p>
<p>双唇自然张开，口腔放松。舌尖在下牙齿后方，舌面平放</p>
<ul>
<li><strong>&#x2F;ɜ:&#x2F;</strong></li>
</ul>
<p>her、person、learn、bird、word、fur、urgent</p>
<p>嘴自然张开，唇和舌自然放松，要确保发音时间够长，是重读的长音。如果发音不重读，更短就变成了&#x2F;ə&#x2F; ，在单词中的拼写有er、ear、ir、or、ur等。</p>
<p>在<strong>美式</strong>英语中会r化，写作&#x2F;ɜ:r&#x2F;，是美式英语最显著的特征之一。</p>
<ul>
<li><strong>&#x2F;ə&#x2F;</strong></li>
</ul>
<p>a-about balloon、e-taken problem、i-family pencil、o-memory freedom、u-supply support、y-syringe analysis 这些字母在单词内发音的时候都发&#x2F;ə&#x2F;</p>
<p>嘴自然张开,唇和舌都自然放松不要重读,轻轻地让气流冲出声带自然读出重读,变长→&#x2F;ɜ:&#x2F;，它是英语中出现频率它是英语最高，最特殊,最重要的schwa(中央元音或中性元音)。让说话者在不需要强调某个音时用它代替，为了在某个音上减少所花时间，<strong>弱化</strong>成一个中性的默认音。有时候&#x2F;ə&#x2F;甚至省略不读。</p>
<ul>
<li><strong>&#x2F;ʌ&#x2F;</strong></li>
</ul>
<p>but、hut、must、son、ton、done</p>
<p>舌尖在下牙齿后方，舌头平放发音靠口腔中后方，类似于啊但是口型没有那么大,时长更短，英美发音不同。</p>
<p><strong>美音</strong>&#x2F;ʌ&#x2F;和中央元音&#x2F;ə&#x2F;区别在于，&#x2F;ʌ&#x2F;只出现在重读音节中，而&#x2F;ə&#x2F;只出现在轻读音节中。两者一般不做舌位上的区分，区别在于是否重读,在美音中的发音不是在口腔中后方，而是在口腔中间，也就说比英音靠前。</p>
<ul>
<li><strong>&#x2F;ɔ:&#x2F;</strong></li>
</ul>
<p>caught、bought、law、saw、door、four</p>
<p>嘴唇要撅起来，圆而外凸,肌肉较为紧张，口腔后方发音。</p>
<p><strong>美音</strong>中&#x2F;ɔ&#x2F;没有英音那样圆形外凸，更靠近汉语拼音ao而不是o，如果这个音后面跟字母r，美音中往往r化。</p>
<ul>
<li><strong>&#x2F;æ&#x2F;</strong></li>
</ul>
<p>bad、fat、pat、lad、mat、sat</p>
<p>最容易读错的音之一，口型一定要张大，饱满，嘴角也要向两边拉伸。舌端在下牙齿后方，同时发出&#x2F;ɑ:&#x2F;和&#x2F;e&#x2F;这两个音。</p>
<ul>
<li><strong>&#x2F;ɑ:&#x2F;</strong></li>
</ul>
<p>father、fast、glass、car、park、mark</p>
<p>&#x2F;ɑ:&#x2F;的口型比“啊”更大,发音更靠口腔后部(舌根处)发音，时长要足够长。</p>
<ul>
<li><strong>&#x2F;ɒ&#x2F;</strong></li>
</ul>
<p>top、hot、lot、box、stop、wash</p>
<p>&#x2F;ɒ&#x2F;和普通话的凹(ao)相似,但并不相同发&#x2F;ɒ&#x2F;时,嘴型更小,时间更短,凹有口型变化，&#x2F;ɒ&#x2F;没有。</p>
<p>在<strong>美音</strong>中一般读作&#x2F;ɑ:&#x2F;，也是英式英语和美式英语主要区别之一。</p>
<h3 id="双元音"><a href="#双元音" class="headerlink" title="双元音"></a>双元音</h3><ul>
<li><strong>&#x2F;eɪ&#x2F;</strong></li>
</ul>
<p>make、date、cake、safe、play、plane</p>
<p>&#x2F;e&#x2F;和&#x2F;ɪ&#x2F;一前一后快速紧密发出，或者理解为从&#x2F;e&#x2F;向&#x2F;ɪ&#x2F;平滑发音。发这个音口腔是有变化的。</p>
<ul>
<li><strong>&#x2F;ɔɪ&#x2F;</strong></li>
</ul>
<p>boy、toy、soy、voice、noise、moist</p>
<p>&#x2F;ɔ:&#x2F;变短后和&#x2F;ɪ&#x2F;一前一后快速紧密发出，或者理解为从&#x2F;ɔ:&#x2F;向&#x2F;ɪ&#x2F;发音，发这个音口腔是有变化。</p>
<ul>
<li><strong>&#x2F;aɪ&#x2F;</strong></li>
</ul>
<p>bike、nice、time、lick、site、life</p>
<p>&#x2F;a&#x2F;和&#x2F;ɪ&#x2F;一前一后快速紧密发出，或者理解为从&#x2F;a&#x2F;向&#x2F;ɪ&#x2F;发音，发这个音口腔是有变化的，口型更加饱满。</p>
<ul>
<li><strong>&#x2F;aʊ&#x2F;</strong></li>
</ul>
<p>how、cow、allow、house、loud、mouse</p>
<p>&#x2F;a&#x2F;和&#x2F;ʊ&#x2F;一前一后快速紧密发出，发这个音口腔是有变化的，口型更饱满更长。</p>
<ul>
<li><strong>&#x2F;əʊ&#x2F;</strong></li>
</ul>
<p>open、hope、post、coat、boat、soap</p>
<p>&#x2F;ə&#x2F;和&#x2F;ʊ&#x2F;一前一后快速紧密发出，发这个音口腔是有变化的，嘴唇有收缩的，英音的起始音位比**美音&#x2F;oʊ&#x2F;**更靠前。</p>
<ul>
<li><strong>&#x2F;ʊə&#x2F;</strong></li>
</ul>
<p>tour、poor、moor、pure、cure、lure</p>
<p>&#x2F;ʊ&#x2F;和&#x2F;ə&#x2F;一前一后快速紧密发出，发音一定要连贯。读音在英音中包含&#x2F;ʊə&#x2F;的词基本上都包含字母r，在<strong>美音</strong>中会r化。</p>
<ul>
<li><strong>&#x2F;eə&#x2F;</strong></li>
</ul>
<p>hair、pair、chair、fare、care、dare</p>
<p>&#x2F;e&#x2F;和&#x2F;ə&#x2F;一前一后快速紧密发出，发音一定要连贯，注意这个&#x2F;ə&#x2F;可不等于&#x2F;r&#x2F;.</p>
<ul>
<li><strong>&#x2F;ɪə&#x2F;</strong></li>
</ul>
<p>area、idea、beer、dear、fear、here</p>
<p>&#x2F;ɪ&#x2F;和&#x2F;ə&#x2F;一前一后快速紧密发出，发音一定要连贯。请注意,如果是读英音，单词拼写即使出现字母r，单词内部也不会r化，如果是读<strong>美音</strong>，只有单词内部出现r，才有可能r化。美音中如出现r，则对应读音为&#x2F;ɪr&#x2F;如不出现r，则一样。如果单词内部没有r，则英音美音都是&#x2F;ɪə&#x2F;，比如idea。</p>
<h2 id="辅音"><a href="#辅音" class="headerlink" title="辅音"></a>辅音</h2><p>概念解读(辅音三阶段)：成阻：气流被阻塞；持阻：气流持续往外冲，但仍被阻塞；除阻：阻塞被去除，气流冲出；</p>
<p>辅音三要素：清浊，调音部位、调音方式</p>
<blockquote>
<p>很多中式发音就是因为喜欢在字母后面加上其他的音，比如s后面加i变成”子“please读成普利子</p>
</blockquote>
<ul>
<li><strong>&#x2F;p&#x2F; &#x2F;b&#x2F;</strong></li>
</ul>
<p>peak beak、pet bed、pig big、rapid rabbit、lap lab、speak beak</p>
<ol>
<li>如果p后有元音，比如: peak就是<strong>送气音</strong></li>
<li>如果p紧跟s，比如: speak就是<strong>不送气音</strong></li>
<li>如果p后紧跟某些辅音，往往嘴巴闭上就基本完成发音国际音标:[p ]，<strong>几乎听不出这个音</strong>，比如: trapdoor, help me, leap year，<strong>无声除阻音</strong> (也称不完全爆破音)</li>
</ol>
<p><strong>&#x2F; b&#x2F;<strong>是</strong>浊辅音</strong>，声带振动。</p>
<ul>
<li><strong>&#x2F;t&#x2F; &#x2F;d&#x2F;</strong></li>
</ul>
<p>tip dip、tea deep、test desk、tap dab、bat bad、bet bed</p>
<ol>
<li>如果t后有元音，比如:top就是送气音</li>
<li>如果t紧跟s，比如: stop就是<strong>不送气音</strong></li>
<li>如果t后紧跟某些辅音，嘴巴闭上就基本完成发音国际音标: [t ]比如: setback, forget me，<strong>无声除阻音</strong>。</li>
</ol>
<p>如果想要知道音标的音位变体，见参考“英语兔”视频部分</p>
<ol>
<li>在<strong>美式英语</strong>中，元音之间的字母t(尤其是非重读音节中)，读作<strong>闪音</strong>，国际音标:[ɾ]，舌尖在上牙齿上方硬腭处，阻挡气流,轻轻—弹比如: water, better, little，听起来很像发出了&#x2F;d&#x2F; 的声音。在标准英音中仍读作正常t: water, better, little。</li>
<li>在<strong>美式英语</strong>中，鼻音&#x2F;n&#x2F;之前的t往往读作<strong>喉塞音</strong>，国际音标:[ʔ]，声门阻住气流，像是把声音”卡在喉咙”里一样比如: certain, important, button，在标准英音中仍读作正常t : certain, important, button</li>
<li>在<strong>美式英语</strong>中，鼻音&#x2F;n&#x2F;之后的t往往基本听不见，比如: winter≈winner， interview≈innerview，甚至有的词中, t前后都有鼻音，比如: mountain，在标准英音中仍读作正常t: winter, interview, mountain</li>
<li>&#x2F; d&#x2F;是浊辅音，声带振动。在美音中，&#x2F;d &#x2F;和&#x2F;t&#x2F;一样会有<strong>闪音</strong>的读法: metal≈medal<strong>，</strong>鼻音也会影响&#x2F;d&#x2F;的读音: abandon.</li>
</ol>
<ul>
<li><strong>&#x2F;k&#x2F; &#x2F;g&#x2F;</strong></li>
</ul>
<p>kit git、kate gate、cup gut、anchor anger、pick pig、peck keg</p>
<ol>
<li>如果k后有元音比如:kite，就是送气音</li>
<li>如果k紧跟s比如: sky，不送气音普通话”该”的声母</li>
<li>如果k后紧跟某些辅音嘴巴闭上就基本完成发音国际音标: [k ]，比如: dogtor, backdoor, make dinner，<strong>无声除阻音</strong>。</li>
</ol>
<ul>
<li><strong>&#x2F;m&#x2F; &#x2F;n&#x2F; &#x2F;ŋ&#x2F;</strong></li>
</ul>
<p>map nap、met net、meet neat、room noon、tom run、lime line、sin sing、on long、sun sung</p>
<ol>
<li>&#x2F;m&#x2F;在元音之前，和普通话”妈”的声母(汉语拼音m)相似。在元音之后，发音方式相似，但只是双唇闭拢发鼻音。</li>
<li>&#x2F;n&#x2F;在元音之前，和普通话”拿”的声母(汉语拼音n)相似&#x2F;n&#x2F;要比&#x2F;m&#x2F;的舌位高，尤其是舌端部分。在元音之后,发音方式相似，轻微通过鼻子出气。</li>
<li>&#x2F;ŋ&#x2F;和&#x2F;n&#x2F;相似,但舌后端抵住软腭，而不像&#x2F;n&#x2F;一样舌前端抵住上齿龈。</li>
</ol>
<p>普通话中的后鼻音往往没有英语中那么清晰明显</p>
<ul>
<li><strong>&#x2F;f&#x2F; &#x2F;v&#x2F;</strong></li>
</ul>
<p>fat valley、fit visit、ferry very、fest vest、life drive、leaf leave</p>
<p>&#x2F;f&#x2F;和普通话”夫”的声母，基本一样&#x2F;v&#x2F;是”声带振动版”的&#x2F;f&#x2F;</p>
<ul>
<li><strong>&#x2F;s&#x2F; &#x2F;z&#x2F;</strong></li>
</ul>
<p>sip zip、soon zoom、soup zoo、lesson reason、once lose、peace please</p>
<p>英语的&#x2F;s&#x2F;，&#x2F;z&#x2F;都属于所谓<strong>摩擦音</strong>，不同于爆破音，&#x2F;s&#x2F;和普通话”斯”的声母(汉语拼音s)一样，&#x2F;z&#x2F;和&#x2F;s&#x2F;很像，区别就在于&#x2F;z&#x2F;发音时<strong>声带振动</strong>。</p>
<ul>
<li><strong>&#x2F;θ&#x2F; &#x2F;ð&#x2F;</strong></li>
</ul>
<p>three there、thin that、thank those、thigh the、bath bathe、breath breathe</p>
<p>和&#x2F;s&#x2F;&#x2F;z&#x2F;一样，属于摩擦音，不同在于舌尖不在上下牙齿后方，而是在上下齿之间，被轻轻咬住，&#x2F;θ&#x2F; &#x2F;ð&#x2F;区别在于&#x2F;ð&#x2F;需要<strong>声带振动</strong>。</p>
<ul>
<li><strong>&#x2F;ʃ&#x2F; &#x2F;ʒ&#x2F;</strong></li>
</ul>
<p>mesh measure、fresh pleasure、leash decision、attention occasion、shall usual、shame regime</p>
<p>&#x2F;ʃ&#x2F; &#x2F;ʒ&#x2F;属于摩擦音，&#x2F;ʃ&#x2F; &#x2F;ʒ&#x2F;区别在于&#x2F;ʒ&#x2F;需要声带振动。</p>
<ul>
<li><strong>&#x2F;tʃ&#x2F; &#x2F;dʒ&#x2F;</strong></li>
</ul>
<p>chuck jug、chop job、choke joke、cheap jeep、catch page、pitch college</p>
<p>&#x2F;tʃ&#x2F;可以理解为由&#x2F;t&#x2F;和&#x2F;ʃ&#x2F;构成,爆破音&#x2F;t&#x2F;和摩擦音&#x2F;ʃ&#x2F;同时发出，声带不振动。</p>
<p>&#x2F;dʒ&#x2F;可以理解为由&#x2F;d &#x2F;和&#x2F;ʒ&#x2F;构成,爆破音&#x2F;d&#x2F;和摩擦音&#x2F;ʒ&#x2F;同时发出，声带振动，所以也被称作破擦音。</p>
<ul>
<li><strong>&#x2F;h&#x2F;</strong></li>
</ul>
<p>hat、hot、high、home、house、him</p>
<p>舌面后部抬起接近软腭，形成缝隙,让气流向外通过,声带不振动。</p>
<ul>
<li><strong>&#x2F;w&#x2F;</strong></li>
</ul>
<p>was、why、wide、wet、we、wood</p>
<p>双唇圈起，向外凸出，气流冲出发音，声带震动，&#x2F;w&#x2F;往往听上去像元音&#x2F;u:&#x2F;或&#x2F;ʊ&#x2F;,所以又被称作半元音，英语w开头的单词基本都是&#x2F;w&#x2F;开始。</p>
<ul>
<li><strong>&#x2F;r&#x2F;</strong></li>
</ul>
<p>rat、red、read、rice、right、room、car、her、ear、bore、tour、pure</p>
<ol>
<li>英音中，当字母r出现在元音<strong>之前</strong>，双唇突出并<strong>圆唇</strong>,舌尖上扬，气流从舌面上方滑出,声带振动。发英语&#x2F;r&#x2F;的音时，舌尖指向上齿龈。</li>
<li>英音中，当字母r出现在元音<strong>之后</strong>，—般不发音或读作中央元音&#x2F;ə&#x2F;</li>
<li>如果r出现在单词<strong>末尾</strong>，而下一个单词以元音开头,则连读时一般读出，比如:bear it、fear us、gear up</li>
<li>美音和英音的区别在于:当字母r出现在元音之后，字母r往往会让<strong>元音r化</strong>，而在英音中则一般不发音或读作中央元音&#x2F;ə&#x2F;</li>
</ol>
<ul>
<li><strong>&#x2F;j&#x2F;</strong></li>
</ul>
<p>yes、yard、yellow、young、yoga、use</p>
<p>舌端往上抬向硬腭，与元音&#x2F;i:&#x2F;的舌位相似，但是更高一些。气流从舌面和硬腭之间通过，产生摩擦出声，声带振动。&#x2F;j&#x2F;往往听上去像元音&#x2F;i:&#x2F;或&#x2F;ɪ&#x2F;，所以又被称作半元音。但是&#x2F;j&#x2F;的舌端和硬腭靠得更近，有摩擦的感觉。</p>
<ol>
<li><strong>&#x2F;j&#x2F;的省略：</strong>在<strong>美式英语</strong>中,有些辅音(如&#x2F;t&#x2F;，&#x2F;d&#x2F;，&#x2F;n&#x2F;)后的&#x2F;j&#x2F;经常被<strong>省略</strong>，这个被称作yod-dropping(yod就是&#x2F;j&#x2F;)</li>
<li><strong>&#x2F;j&#x2F;的融合：</strong>和之前的辅音经常”合在一起读”,这个被称作yod-coalescence，在口语中(尤其是英音口语中)常见, “标准”英语一般尽量避免。有的词中,yod-coalescence已成为标准音，如: educate &#x2F;‘edʒukeɪt&#x2F;、issue &#x2F; ‘ɪʃu:&#x2F; 、azure &#x2F;‘æʒə&#x2F;</li>
<li>yod-coalescence也适用于单词之间，比如:Nice to meet you! Would you do it?</li>
</ol>
<ul>
<li><strong>&#x2F;l&#x2F;</strong></li>
</ul>
<p>清晰L：lack lake like look lose leak、模糊L：help mile all girl school full</p>
<ol>
<li>如果l后有元音：舌尖抵住上牙齿后方，让气流从舌两边(两侧)滑出，同时舌尖离开上牙齿后，声带振动，所以&#x2F;l&#x2F;被叫做”舌边音”或”舌侧音”（清晰舌边音）</li>
<li>如果l后没有元音：舌位和元音前的&#x2F;l&#x2F;一致，但是舌尖不离开上牙齿，声带振动（模糊舌边音）模糊L要发到位，否则导致连读时不顺畅，或者没法连读。</li>
<li>字母|还有一个版本:不发音，英语中不少单词中的l都是不发音的，比如:calm、palm、salmon、colonel、folk</li>
<li>英音美音发音区别:有的包含l的词在英式英语和<strong>美式英语</strong>中发音不同，比如:英音: million, billion, value美音: million, billion, value</li>
</ol>
<ul>
<li><strong>&#x2F;ts&#x2F; &#x2F;dz&#x2F;</strong></li>
</ul>
<p>bats bands、dates deeds、kites kids、fights friends、hats hands、lots leads</p>
<ol>
<li>&#x2F;ts&#x2F;可以理解为由&#x2F;t&#x2F;和&#x2F;s&#x2F;构成。爆破音&#x2F;t&#x2F;和摩擦音&#x2F;s&#x2F;同时发出，声带不振动。</li>
<li>&#x2F;dz&#x2F;可以理解为由&#x2F;d&#x2F;和&#x2F;z&#x2F;构成，爆破音&#x2F;d&#x2F;和摩擦音&#x2F;z&#x2F;同时发出，声带振动。</li>
</ol>
<p>所以这两个音被归类为所谓破擦音(爆破＋摩擦)</p>
<ul>
<li><strong>&#x2F;tr&#x2F; &#x2F;dr&#x2F;</strong></li>
</ul>
<p>trip drip、true drew、tree dream、try dry、country laundry、pantry hundred</p>
<ol>
<li>&#x2F;tr&#x2F;可以理解为由&#x2F;t&#x2F;和&#x2F;r&#x2F;构成。爆破音&#x2F;t&#x2F;和摩擦音&#x2F;r&#x2F;同时发出，声带不振动。</li>
<li>&#x2F;dr&#x2F;可以理解为由&#x2F;d&#x2F;和&#x2F;r&#x2F;构成。爆破音&#x2F;d&#x2F;和摩擦音&#x2F;r&#x2F;同时发出，声带振动。</li>
</ol>
<p>所以这两个音被归类为所谓破擦音(爆破＋摩擦)</p>
<h1 id="英语发音技巧"><a href="#英语发音技巧" class="headerlink" title="英语发音技巧"></a>英语发音技巧</h1><blockquote>
<p>这些发音技巧能够让你的发音更加地道，同时也能很大程度上提升你的英语听力</p>
</blockquote>
<h2 id="连音"><a href="#连音" class="headerlink" title="连音"></a>连音</h2><p>单词(辅音结尾)+单词(元音开头)如：not at all.(“闹太套”),中文不习惯连读，我们读“我爱天安门”不会像外国人那样连读成“外天门”。这就是英语听不准确的重要口语习惯和原因。也就是说，<strong>辅音单词结尾的辅音要发到位，不加上不存在的元音</strong>，然后自然读下一个单词就能“连读”。</p>
<p>💡连读不是创造一个音，而是两个音结合产生的结果。试着平滑地读I am，你就会感受到&#x2F;j&#x2F;的发音，这就是<strong>连音的本质</strong>。如果<strong>你的发音不标准，就不会自然而然地读出连音</strong>。</p>
<p><strong>加音规则</strong></p>
<p>注意是先有加音现象，再总结出规律。</p>
<ol>
<li>元音+元音：元音与元音连读容易糊，加上一个之前不存在的“过渡音”使得加音连贯。<ul>
<li>&#x2F;u:&#x2F;, <strong>&#x2F;ʊ&#x2F;</strong>,<strong>&#x2F;aʊ&#x2F;</strong>, <strong>&#x2F;əʊ&#x2F;</strong>+元音:+&#x2F;w&#x2F;。如：just do it.</li>
<li>&#x2F;i:&#x2F;,<strong>&#x2F;ɪ&#x2F;</strong>,<strong>&#x2F;eɪ&#x2F;</strong>,<strong>&#x2F;aɪ&#x2F;</strong>,<strong>&#x2F;ɔɪ&#x2F;</strong>+元音:+&#x2F;j&#x2F;。如： I am.</li>
<li><strong>&#x2F;ə&#x2F;</strong>,<strong>&#x2F;ɑ:&#x2F;</strong>,<strong>&#x2F;ɔ:&#x2F;</strong>+元音:+&#x2F;r&#x2F;。主要是英式英语用，美式英语很少。如 the idea of；美式英语主要是字母r+元音，如bear it.连读但是不加音。</li>
</ul>
</li>
<li>辅音+元音(词尾辅音 + 词首元音）： travel agency</li>
</ol>
<h2 id="同化"><a href="#同化" class="headerlink" title="同化"></a>同化</h2><ol>
<li>逆行同化(前面的音受到后一个音的影响)<ol>
<li>无声除阻(不完全爆破)：&#x2F;k&#x2F; &#x2F;t&#x2F; &#x2F;d&#x2F;+辅音，爆破音不发音 如:look back</li>
<li>浊音变清音：如 have to :直接变成&#x2F;f&#x2F;+&#x2F;t&#x2F;,这样比原来的浊音更好发音。</li>
<li>双唇化：如in person.受到p这个要闭唇的音印象，读起来变成了 im person。</li>
</ol>
</li>
<li>顺行同化(后面音受到前面影响)<ol>
<li>复数词尾：如books 一般会读成ks而不是kz。</li>
</ol>
</li>
<li>互相同化：<ol>
<li>融合发音:&#x2F;s&#x2F;+&#x2F;j&#x2F; &#x3D; **&#x2F;ʃ&#x2F; ;**例如:God bless you;&#x2F;z&#x2F;+&#x2F;j&#x2F; &#x3D;  <strong>&#x2F;ʒ&#x2F;</strong>;例如as you wish;&#x2F;t&#x2F;+&#x2F;j&#x2F; &#x3D; <strong>&#x2F;tʃ&#x2F;</strong> ;例如Nice to me you;&#x2F;d&#x2F;+&#x2F;j&#x2F; &#x3D; <strong>&#x2F;dʒ&#x2F;</strong>;例如Did you do it?</li>
<li>辅音延长：当前面一个音和后面一个音是同一个音时。只发一个音(这里的音是指<strong>音标</strong>不是字母)，但是要延长：如fish shop.这里前后都是sh</li>
</ol>
</li>
<li>完全失爆（词尾爆破音( p b t d k g)+ 词首爆破音( p b t d k g)：<ol>
<li>good question</li>
</ol>
</li>
</ol>
<h2 id="异化"><a href="#异化" class="headerlink" title="异化"></a>异化</h2><p>常见于&#x2F;s&#x2F;+&#x2F;t&#x2F;、&#x2F;s&#x2F;+&#x2F;k&#x2F;、&#x2F;s&#x2F;+&#x2F;p&#x2F;的组合。<strong>严格来说不是浊化</strong>，而是将这些音变成不送气的音，但是只是发音的话就是不用考虑这些</p>
<ol>
<li>r使前面的元音r化：如door 使前一个r消失，如surprise变成su(r)prise.</li>
<li>具体例子sp+元音：<ol>
<li>How do you spend your leisure time?</li>
<li>sk+元音：i’m so scared</li>
<li>st + 元音：Stand up and study hard.</li>
<li>str+ 元音:  He struck me with a stick</li>
</ol>
</li>
</ol>
<h2 id="省音"><a href="#省音" class="headerlink" title="省音"></a>省音</h2><ol>
<li>偷懒不读某一个或者是一些音：如interesting,这类往往可省可不省，省多少看个人说话习惯。</li>
<li>必须省音。如debt\subtle\know\knee\write\wrong……这些词中b\k\w都是省略不读的。</li>
<li>词与词之间省略：比如last year就只读las year.t直接省略。</li>
<li>还有&#x2F;t&#x2F;、&#x2F;d&#x2F;等(词尾)爆破音也经常省略。如：have 的&#x2F;h&#x2F;(这被称为<strong>h击穿</strong>)。ing中的&#x2F;g&#x2F;，比如 Are you listenin’?这里打‘就说明省去了g</li>
</ol>
<h2 id="缩读"><a href="#缩读" class="headerlink" title="缩读"></a>缩读</h2><p>缩写表示可以缩读：如 I am&#x3D;I’m,I have&#x3D;I’ve 这些词往往在英语听力的时候读的很快不容易听到或者是听完整。比如wanna&#x3D;want to, going to&#x3D;gonna,because&#x3D;’cause还有许多缩写形式的单词或者短语都是这种形式。还有很多类似的都是，比如don’t know&#x3D;dunno、give me&#x3D;gimme、would have would’ve&#x2F;would’a、you and I&#x3D;you ‘n’l、come on &#x3D;c’mon</p>
<h2 id="弱读"><a href="#弱读" class="headerlink" title="弱读"></a>弱读</h2><p>弱读非常重要，是中国人听不清英语的关键。<br>弱读不是声音变小，而是将元音改变了,这样能够让语句发音更轻松自然，不至于像中文那样“字正腔圆”导致读起来上气不接下气。</p>
<p>例句：What <strong>do</strong> you want <strong>to do</strong>?<strong>From</strong> <strong>what</strong> I <strong>can</strong> tell,you <strong>must</strong> be tired <strong>of</strong> it,<strong>but</strong> I’m not,so <strong>would</strong> you like me <strong>to do</strong> it <strong>for</strong> you?<br>&#x2F;d<strong>ə</strong> t<strong>ə</strong> fr<strong>ə</strong>m w<strong>ə</strong>t k<strong>ə</strong>n m<strong>ə</strong>st <strong>ə</strong>v b<strong>ə</strong>t w<strong>ə</strong>d f<strong>ə</strong>&#x2F;</p>
<blockquote>
<p>弱读时，单词的中间的元音一般会变成中央元音&#x2F;<strong>ə&#x2F;</strong></p>
</blockquote>
<h2 id="节奏"><a href="#节奏" class="headerlink" title="节奏"></a>节奏</h2><p>💡英语是重音等时语言</p>
<p><strong>英语语句中重读音节之间的时长基本相等</strong>，也就是说英语句中词语所花时间是由重读音节数量决定的。举例：Rabbits | eat | carrots.\A rabbit is | eating some | carrots.\The <strong>rabbit</strong> has been | <strong>eating</strong> some of the | <strong>carrots</strong>.分成三个音节，加粗部分为重读音节<br>也就是说，这是三个音节之间时长相等，根据之间的单词个数决定要不要快速读或者是连读，这样其实也体现了中央元音&#x2F;ə&#x2F;的重要性，就是为了和重读音节相对应的。</p>
<p>总而言之记住一句话：英语句子中的非重读音节数量远远大于重读音节数量。</p>
<h2 id="语调"><a href="#语调" class="headerlink" title="语调"></a>语调</h2><p>💡语调基于节奏</p>
<p>语调就是英语句子声调在哪里升高哪里降低。但是不是中文的四声或者五度标记法。<br>语调就是表达说话人的情感，不需要死记(不一定升调就是提问，降调就是丧气)，多听多说就能理解。</p>
<h3 id="升调"><a href="#升调" class="headerlink" title="升调"></a>升调</h3><p>这里用☑表示升调，放在哪个单词后哪个单词就升调，一般用来表达态度&#x2F;情感&#x2F;陈述&#x2F;疑问&#x2F;强调等</p>
<p>举例</p>
<ol>
<li>一般疑问句：Are you kidding me☑ ？</li>
<li>陈述形式的提问：Rabbits eat carrot☑ ?</li>
<li>反义疑问词中的附加问句：you are right,are not you☑ ?</li>
<li>列举中最后一个元素之前的元素：Are rabbits red☑，yellow☑，blue☑，green☑,or white?</li>
<li>礼貌请求:Tell me,please☑</li>
<li>句子中未完成的部分：The rabbit ate a carrot☑ and then slept.</li>
</ol>
<h3 id="降调"><a href="#降调" class="headerlink" title="降调"></a>降调</h3><p>用[\]表示降调</p>
<ol>
<li>特殊疑问句(非yes&#x2F;no问题)：what is your name[\]?</li>
<li>陈述事实或者回答问题： I see a white rabbit[\].</li>
<li>感叹：what a beautiful leaf[\]!</li>
<li>命令：put the girl down[\]!</li>
<li>列举中最后一个元素：反义疑问句前一部分：Rabbits like to eat,play,sleep and run[\].</li>
<li>反义疑问句前面一部分：Rabbit eat carrots[\],don’t they?</li>
<li>作为回答&#x2F;附和&#x2F;确认的问句形式：The rabbit ate all the carrots. Did it[\]?</li>
<li>已经知道提问的答案：can you call me at 6[\].</li>
<li>问句形式表礼貌，并非真的在问问题：Would you pass me the salt[\]?</li>
<li>不满、愤怒：Is that what you think[\]?</li>
</ol>
<p>参考音节</p>
<p>TU表示重读，tu表示弱读。同样适用于句子和词组。</p>
<ol>
<li>单音节 TU：如two!two?</li>
<li>双音节 TU tu： 如rabbit!rabbit?</li>
<li>双音节 tu TU：如sit down!sit down?</li>
<li>三音节 TU tu tu：如possible!possible?</li>
<li>三音节 tu TU tu：如computer!computer?</li>
<li>三音节 tu tu TU：如engineer!engineer?</li>
</ol>
<h1 id="自然拼读-Phonics"><a href="#自然拼读-Phonics" class="headerlink" title="自然拼读(Phonics)"></a>自然拼读(Phonics)</h1><p>就是看字母，<strong>猜读音</strong>。这部分内容属于技巧向，对英语口语与听力有帮助。</p>
<p>以下内容主要讨论一般情况，特殊情况请参考词典。</p>
<h2 id="开音节与闭音节"><a href="#开音节与闭音节" class="headerlink" title="开音节与闭音节"></a>开音节与闭音节</h2><p><strong>概念解析</strong>：</p>
<p>音节：由音素组合成的<strong>最小</strong>最自然的语音单位，比如rabbit的音节分别是rab和bit。</p>
<p>闭音节：以辅音结尾的音节。比如baby中的by音节。注意这里的辅音不是指字母而是指音标。</p>
<p>开音节：以元音结尾的音节。比如baby中的ba音节。</p>
<p>重读音节：被强调的音节就是重读音节，往往声音更大，元音也被拉长。比如rabbit.其音标为&#x2F;‘ræbɪt&#x2F; 这里的’就是用来标记重读音节的，所以rab音量较大，元音也延长。ˌ为次重读音节，在重读与非重读之间。比如accidental，其音标为&#x2F;ˌ æksɪ’dentl&#x2F;</p>
<p>非重读音节：与重读音节相反。</p>
<p>相对开音节：以不发音的元音字母e结尾的闭音节。</p>
<h2 id="单个字母"><a href="#单个字母" class="headerlink" title="单个字母"></a>单个字母</h2><blockquote>
<p>以下图都是从英语兔公众号下载而来</p>
</blockquote>
<p>辅音字母</p>
<p><img src="/2024/10/13/%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD(%E8%8B%B1%E8%AF%AD%E5%85%94%E7%89%88)/1.png" alt="1"></p>
<p>元音字母</p>
<p><strong>单个元音字母在重读开音节里读元音字母本身的读音</strong></p>
<p><img src="/2024/10/13/%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD(%E8%8B%B1%E8%AF%AD%E5%85%94%E7%89%88)/2.png" alt="2"></p>
<p><strong>单个元音字母在相对开音节里读元音字母本身的读音</strong> 比如bate</p>
<h2 id="字母组合"><a href="#字母组合" class="headerlink" title="字母组合"></a>字母组合</h2><p>辅音组合</p>
<p><img src="/2024/10/13/%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD(%E8%8B%B1%E8%AF%AD%E5%85%94%E7%89%88)/3.png" alt="3"></p>
<p>元音组合</p>
<p><img src="/2024/10/13/%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD(%E8%8B%B1%E8%AF%AD%E5%85%94%E7%89%88)/4.png" alt="4"></p>
<p>以上这些只是技巧向，真正要学好英语口语还是要大量的输入与输出。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.jiwake.com/yinbiaofayin/">英语音标发音表-英语48个音标在线读 (jiwake.com)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/457728471">【笔记】英语兔的DJ音标整理 - 知乎 (zhihu.com)</a></li>
<li><a href="https://www.bilibili.com/video/BV1iV411z7Nj?p=28&vd_source=bb8dacb993f11c0e39f8147c98a2894c">【全网最适合中国人的免费音标课(纯干货, 超详细!)】</a></li>
<li><a href="https://www.bilibili.com/video/BV1SZ4y1K7Lr?p=7&vd_source=bb8dacb993f11c0e39f8147c98a2894c">【你必须知道的英语发音技巧(让你的口语更纯正, 更地道!)】</a></li>
<li><a href="https://www.bilibili.com/video/BV14841117gz?p=4&vd_source=bb8dacb993f11c0e39f8147c98a2894c">英语自然拼读极简教程（免费、简洁、高效 | 半小时内打牢基础</a></li>
</ol>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>英语语法(英语兔版)</title>
    <url>/2024/10/11/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="英语语法综述"><a href="#英语语法综述" class="headerlink" title="英语语法综述"></a>英语语法综述</h1><p>💡语法的目的在于造句，而英语句子的核心在于动词</p>
<p>英语中所有的句子都可以视为是简单句的组合，而简单句基本上都服从一个模板：<strong>什么+怎么样</strong>。</p>
<p>这两个代表不同的句子成分(clause elements)，前者代表主语(subject),后者代表谓语(predicate)，即主语+谓语</p>
<p>而谓语代表的是广义的动作&#x2F;发生了什么事,谓语的核心在于谓语<strong>动词</strong>。提醒：谓语≠谓语动词,谓语是除主语之外的，而谓语动词只是一个动词。</p>
<p><strong>所以要学好语法先从动词开始</strong>。</p>
<hr>
<h1 id="动词-verbs"><a href="#动词-verbs" class="headerlink" title="动词(verbs)"></a>动词(verbs)</h1><h2 id="动词的三大本领"><a href="#动词的三大本领" class="headerlink" title="动词的三大本领"></a>动词的三大本领</h2><ol>
<li>表示动作的时间</li>
<li>表示动作的状态</li>
<li>表示动作的假设，情感等</li>
</ol>
<p><strong>动词在五大句型中的作用</strong></p>
<table>
<thead>
<tr>
<th>作用</th>
<th>形式</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>可以独立完成的动作(主语+不及物动词)</td>
<td>主语+不及物动词</td>
<td>I sleep</td>
</tr>
<tr>
<td>有一个动作的承受者</td>
<td>(主语+单及物动词(monotransitive verbs)+宾语(object)</td>
<td>I like you</td>
</tr>
<tr>
<td>有两个动作承受者</td>
<td>主+双及物动词(ditransitive verbs)+间接宾语+直接宾语</td>
<td>I will teach you English.这里的<strong>you</strong>是间接宾语，<strong>English</strong>是直接宾语</td>
</tr>
<tr>
<td>只有一个动作承受者,但是需要补充</td>
<td>主语+复杂及物动词+宾语+补语(complement)</td>
<td>I think you smart</td>
</tr>
<tr>
<td>非动作</td>
<td>主语+系动词(link verbs)+(主语)补语&#x2F;表语</td>
<td>he looks smart.将smart赋予给主语，再加上系动词的部分意义。</td>
</tr>
</tbody></table>
<p>💡五大句型区分关键在于动词之后需要几个对象才能表达完整意思</p>
<p>示意图如下链接</p>
<p><a href="https://excalidraw.com/#json=EPYWVxBRbpHWPXNyDKCQu,mEJeMsJkQ5EpGjxdN-aCiQ">https://excalidraw.com/#json=EPYWVxBRbpHWPXNyDKCQu,mEJeMsJkQ5EpGjxdN-aCiQ</a></p>
<p><strong>动词分类</strong></p>
<div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">一般分类</button><button type="button" class="tab">按动作承受者分类</button><button type="button" class="tab">按状态动作分类</button></div><div class="tab-contents"><div class="tab-item-content active"><table>
<thead>
<tr>
<th>词性</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>实义动词</td>
<td>eat</td>
</tr>
<tr>
<td>系动词</td>
<td>be</td>
</tr>
<tr>
<td>助动词 辅助构成谓语动词</td>
<td>have</td>
</tr>
<tr>
<td>情态动词</td>
<td>must</td>
</tr>
<tr>
<td>非谓语动词)不定式、过去分词、现在分词、动名词)</td>
<td>running</td>
</tr>
</tbody></table></div><div class="tab-item-content"><table>
<thead>
<tr>
<th>类型</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>及物动词</td>
<td>eat vt.吃</td>
</tr>
<tr>
<td>不及物动词</td>
<td>run vi.跑</td>
</tr>
</tbody></table></div><div class="tab-item-content"><table>
<thead>
<tr>
<th>类型</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>动作动词</td>
<td>eat</td>
</tr>
<tr>
<td>状态动词</td>
<td>feel v.感觉 并没有明显的动作</td>
</tr>
</tbody></table></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<h2 id="动词时态"><a href="#动词时态" class="headerlink" title="动词时态"></a>动词时态</h2><p><strong>时态：时间+状态</strong>。前者表明动作发生的时间(过去，现在，将来和过去将来),后者表明动作发生的状态(进行时、完成时、完成进行时、一般时)。<br>四种动词时间与四种时态排列组合就会产生16种时态。</p>
<p>完成状态的<strong>理解在于强调“影响”</strong>，比如<code>I have eaten breakfast.</code> 暗示在过去的某个时间到现在(have的时间)我已经吃了早饭，暗示我还不饿。</p>
<h3 id="现在类"><a href="#现在类" class="headerlink" title="现在类"></a>现在类</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">一般现在</button><button type="button" class="tab">现在进行</button><button type="button" class="tab">现在完成</button><button type="button" class="tab">现在完成进行</button></div><div class="tab-contents"><div class="tab-item-content active"><blockquote>
<p>这里的一般现在严格来说是现在一般时，只是顺序颠倒了一下，后面同理。</p>
</blockquote>
<p><strong>含义：表达事实|表达习惯|表达预计发生的事</strong></p>
<table>
<thead>
<tr>
<th>形式</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>+动词原形</td>
<td>I eat carrots.</td>
</tr>
<tr>
<td>+动词原形+第三人称单数</td>
<td>she eats carrots.</td>
</tr>
<tr>
<td>事实陈述</td>
<td>The sun rise in the east 习惯:I play basketball我打篮球(隐含我有打篮球的习惯) 预计发生的事: The bus leaves at 8 PM tonight.</td>
</tr>
</tbody></table>
<p>误区：一般现在不代表现在正在做，I eat carrots. 意思是我吃胡萝卜.<em>一般代表的是一种默认，或者是未指明</em></p></div><div class="tab-item-content"><p><strong>助动词be的变位+动词现在分词</strong></p>
<table>
<thead>
<tr>
<th>词性</th>
<th>形式</th>
</tr>
</thead>
<tbody><tr>
<td>助动词</td>
<td>1. 系动词 am,is,are…… 2. 作助动词，构成时态</td>
</tr>
<tr>
<td>动词现在分词</td>
<td>1. 通常：+ing 2. 特殊：变化+ing→不规则变化很多都是为了发音而妥协的。I am lying !&#x3D; I am lieing</td>
</tr>
</tbody></table></div><div class="tab-item-content"><p><strong>助动词have的变位+动词过去分词</strong></p>
<table>
<thead>
<tr>
<th>词性</th>
<th>形式</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>Have</td>
<td>1. 实义动词：有 2. 助动词构成时态</td>
<td>2. The rabbit has eaten a carrot.</td>
</tr>
<tr>
<td>动词过去分词</td>
<td>1. 通常：+ed 2. 特殊：变化+ed&#x2F;不规则变化</td>
<td>look-&gt;looked&#x2F;eat-&gt;ate</td>
</tr>
</tbody></table></div><div class="tab-item-content"><p><strong>现在完成+进行时&#x3D;&#x3D;have的变位+been+动词现在分词.意思是已经做了，而且还要继续做  。</strong> 例子：I have been eating carrot.</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<p>💡时态都是在现在类基础上将时间往前(或后)推移，对应时间更改谓语动词即可。</p>
<hr>
<h3 id="过去类"><a href="#过去类" class="headerlink" title="过去类"></a>过去类</h3><p>💡本质就是现在类的助动词(或者情态动词、动词等)变换时间(比如have变成had,is变成was,may变成might)</p>
<div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">一般过去</button><button type="button" class="tab">过去进行</button><button type="button" class="tab">过去完成</button><button type="button" class="tab">过去完成进行</button></div><div class="tab-contents"><div class="tab-item-content active"><table>
<thead>
<tr>
<th>形式</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>过去式(规则的一般+ed)</td>
<td>look-&gt;looked</td>
</tr>
<tr>
<td>不规则变化(不用刻意记，用来写的并不多)</td>
<td>come-&gt;came</td>
</tr>
</tbody></table></div><div class="tab-item-content"><p><strong>助动词be的变位+动词现在分词</strong></p>
<table>
<thead>
<tr>
<th>解释</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>注意be的变位不再是现在时态的只变人称，还要变为相应的时态。<em>即be变成对应的人称过去式</em></td>
<td>she was watching TV</td>
</tr>
<tr>
<td>区别：现在完成vs一般过去 前者强调的是动作完成了吗，后者强调的是动作有没有发生。</td>
<td>前者的例句I have gone to Beijing.(我已经去了北京(暗示没回来))，后者的例句I went to Beijing.(我去过北京)暗示回来了))</td>
</tr>
</tbody></table></div><div class="tab-item-content"><p><strong>同理，见现在完成部分，是助动词have的变位(只有had)+动词过去分词</strong></p></div><div class="tab-item-content"><p><strong>had+been+动词的现在分词</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<p>不规则动词列表：在 本电脑根目录下obsidian内附件集&#x2F;英语&#x2F;文档&#x2F;不规则变化.pdf。读者可以点击此链接<a href="https://www.yingyutu.com/">英语兔 (yingyutu.com)</a> 在英语兔公众号下载对应笔记。</p>
<hr>
<h3 id="将来类"><a href="#将来类" class="headerlink" title="将来类"></a>将来类</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">一般将来</button><button type="button" class="tab">将来进行</button><button type="button" class="tab">将来完成</button><button type="button" class="tab">将来完成进行时</button></div><div class="tab-contents"><div class="tab-item-content active"><p><strong>一般用于非常确定会发生的事</strong></p>
<table>
<thead>
<tr>
<th>形式</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>will(或者是shall)+动词原形</td>
<td>I will eat a carrot.</td>
</tr>
<tr>
<td>助动词be的变位+going+to+动词原形</td>
<td>1. 原样：I am going to take a shower. 2. 省去going：you are to eat a carrot 3. 用about代替going：I am about to chat with him.</td>
</tr>
</tbody></table></div><div class="tab-item-content"><p><strong>will+be+动词的现在分词)在将来的某一个时间段，某个动作正在进行)</strong>  例如：I will be eating a carrot for lunch tomorrow from 1 PM to 3 PM</p></div><div class="tab-item-content"><p><strong>will+have+动词的过去分词</strong> 例子(以下用<strong>ex</strong>表示)：If suddenly you forget me. Do not look for me,for I shall already have forgotten you.</p></div><div class="tab-item-content"><p><strong>will+have+been+动词的现在分词</strong> ex:I will have been eating carrots for 2 hours by 3 PM tomorrow.这里要表达的意思就是：我确定明天下午三点钟时，我不但已经吃了俩钟头胡萝卜(也就是从明天下午1点开始吃)而且还要继续吃.</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<hr>
<h3 id="过去将来类"><a href="#过去将来类" class="headerlink" title="过去将来类"></a>过去将来类</h3><p><em>过去将来可能是现在的过去，也可能是现在的未来。</em></p>
<div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">过去将来一般</button><button type="button" class="tab">过去将来进行</button><button type="button" class="tab">过去将来完成</button><button type="button" class="tab">过去将来完成进行</button></div><div class="tab-contents"><div class="tab-item-content active"><p><strong>would+动词原形|或者是助动词be的变位+going to。</strong></p>
<table>
<thead>
<tr>
<th>would形式</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>Will的过去式</td>
<td>I would eat a carrot.</td>
</tr>
<tr>
<td>虚拟语气，表达和事实相反。</td>
<td>I said I would eat a carrot for lunch. 我之前就说过我会午饭吃胡萝卜，而午饭时间对于之前我说那句话的时间来说是在将来，但至于现在午饭时间有没有到，不得而知</td>
</tr>
</tbody></table></div><div class="tab-item-content"><p><strong>同理，在将来进行时前面+would</strong> </p></div><div class="tab-item-content"><p><strong>同理，在将来完成时前面+would</strong> </p></div><div class="tab-item-content"><p><strong>同理，在将来完成进行前面+would。</strong></p>
<p>中文举例：在这之前，张三说下个月的某一天，你一定会看到我犯完罪，而且还会一直犯下去 在这之前表示过去，说下个月的某一天表明是将来，结合就是过去将来(时间),而犯完罪而且犯下去表明动作已经完成，而且会继续执行，表明动作的状态是完成进行，前后结合，就是过去将来完成进行时态。ex:l said I would have been eating lunch for 2 hours by 1 PM tomorrow&#x2F;yesterday.我)之前)说我明天&#x2F;昨天下午1点前会已经吃了俩钟头中饭(我之前说我会明天&#x2F;昨天下午1点时在吃中饭这个过程中,之前吃了2小时,之后还会继续吃)</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<hr>
<h2 id="动词语气-mood"><a href="#动词语气-mood" class="headerlink" title="动词语气(mood)"></a>动词语气(mood)</h2><p>概念：表示动作的假设，情感等。</p>
<p>难点：虚拟语气。</p>
<p><strong>语气分类</strong></p>
<ol>
<li>陈述语气：描述现实 <code>ex:The rabbit ate a carrot.</code></li>
<li>祈使语气：命令&#x2F;请求<ol>
<li>用第二人称(”你”)和一般现在时态 如：<code>ex:(please)eat the carrot.</code></li>
<li>去掉“你”，并保持动词原形 如：<code>ex:you don&#39;t eat it=&gt;Don&#39;t eat it.</code></li>
</ol>
</li>
<li>虚拟语气：<ol>
<li>理解：人主观的意愿，往往与现实事实相反.比如“如果我知道他是这样的人，我就不会和他在一起了。”言下之意就是我不知道他是这样的人(<strong>现实事实</strong>),而假设了我知道他是这样的人(<strong>主观意愿</strong>)我会做什么。</li>
<li>第一大用法：虚拟语气表“不可能”假设</li>
</ol>
</li>
</ol>
<table>
<thead>
<tr>
<th>时间</th>
<th>条件句</th>
<th>主句</th>
<th>例句</th>
</tr>
</thead>
<tbody><tr>
<td>与现实相悖的想象，主观意愿</td>
<td>过去式)如果是be，一律改为were，不管什么人称)</td>
<td>Would+动词原形)注意，would可以用should、could、might替代，它们分别是shall、can、may的过去式)</td>
<td>If I were you,I would give this video a thumbs-up。                        if句是条件句，后面的句子就是主句)造成的结果)。</td>
</tr>
<tr>
<td>和过去事实相反</td>
<td>had+动词过去分词</td>
<td>Would have+动词过去分词</td>
<td>If I had watched this video before,I would have aced my test.</td>
</tr>
<tr>
<td>和将来事实相反(可能性很小)</td>
<td>should+动词原形(should其实是shall的过去式，也可以用were to +动词原形取代)</td>
<td>Would+动词原形</td>
<td>if I should meet thee after  long years,how should I greet thee?</td>
</tr>
</tbody></table>
<p>分析可得，无论是哪一种虚拟语气，他们都要使用<strong>过去式(即所在的时间前移)</strong> -如对现在假设变成过去式，对过去假设变成过去完成时。  这种过去式可能是谓语动词的过去式，也可能是will，shall和have的过去式，由此提醒：<strong>不要看见过去式就认为动作发生在过去</strong>，也有可能是虚拟的，实际并未发生的。</p>
<p>严格来说，should做shall的过去式时没有“应该”的含义，做情态动词的时候才有，只不过为了翻译流畅才添加含义，本来是无实际含义的。</p>
<ol start="3">
<li>第二大用法：虚拟语气表达愿望、请求、建议、命令等(希望某个动作|事情发生)。</li>
<li>Wish <code>ex: I wish that I were a rabbit.</code> Would rather同理</li>
<li><strong>特例</strong>：demand、suggest、insist、order用虚拟语气是should+动词原形。<ol>
<li>suggest insist order <code>ex:I demand that you)should)give me a carrot</code></li>
</ol>
</li>
</ol>
<table>
<thead>
<tr>
<th>时间</th>
<th>句子结构</th>
<th>例句</th>
</tr>
</thead>
<tbody><tr>
<td>对现在的愿望</td>
<td>Wish+动词过去式</td>
<td>I wish that I were a rabbit.</td>
</tr>
<tr>
<td>对过去的希望</td>
<td>Wish+had&#x2F;would have+动词过去分词</td>
<td>I wish (that)I had eaten the carrot.(我希望你过去吃了那个胡萝卜，言下之意就是在过去你没吃)</td>
</tr>
<tr>
<td>对将来的希望</td>
<td>Wish+should&#x2F;might&#x2F;could&#x2F;would+动词原形</td>
<td>I wish (that)I could eat the carrot.</td>
</tr>
</tbody></table>
<p>再次强调，<strong>虚拟语气</strong>是和陈述语气并列的，所以不同于陈述语气的客观事实描述，虚拟语气描述的是非事实的，主观的，所以不能使用一般时，在翻译和写作时尤其要注意这点。</p>
<h2 id="非谓语动词-non-finite-verbs"><a href="#非谓语动词-non-finite-verbs" class="headerlink" title="非谓语动词(non-finite verbs)"></a>非谓语动词(non-finite verbs)</h2><p>定义：谓语动词有另外的名字：限定性动词)也就是被三单、时态等限制了形式)，与之相对的就是非限定动词，也就是非谓语动词。</p>
<p><code>ex:I am a talking student.</code>这里的talking不被时态、人称所限制，没有动词的本领，也就是变成了非谓语动词</p>
<hr>
<p>💡谓语动词是句子的核心，也就是说，在一个简单句子中谓语动词只能有一个(在有<strong>并列关系</strong>的时候可以有多个谓语动词)，但是非谓语动词不限个数。</p>
<p><strong>非谓语动词分类</strong></p>
<h3 id="动词不定式"><a href="#动词不定式" class="headerlink" title="动词不定式"></a>动词不定式</h3><p><strong>to+动词原形。表示将要发生的动作</strong></p>
<table>
<thead>
<tr>
<th>主要类型(形式)</th>
<th>形式</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>1. 特殊情况to可以省略：make\help\let……一感二听三让四看半帮助。</td>
<td>不定式作主语</td>
<td>To eat a carrot every day is good for the rabbit.</td>
</tr>
<tr>
<td></td>
<td>不定式作直接宾语</td>
<td>The rabbit likes to eat carrots.</td>
</tr>
<tr>
<td></td>
<td>不定式作间接宾语</td>
<td>The rabbit expected the wolf to eat a carrot.强调动作已经发生(全过程)</td>
</tr>
<tr>
<td></td>
<td>不定式作宾补</td>
<td>The rabbit has a lot of carrots to eat.这里的to eat修饰的是carrots。</td>
</tr>
<tr>
<td></td>
<td>不定式作宾语</td>
<td>1. 表原因：<code>I was surprised to get a thumbs-up.</code> 2. 表目的：<code>I will do anything to get a thumbs-up.</code> 3. 表结果：<code>I got enough thumbs-up to make another video.</code></td>
</tr>
<tr>
<td>2. 高级不定式:to+动词原形(”状态”)</td>
<td>\</td>
<td>To be eating a carrot\To have been eating a carrot</td>
</tr>
</tbody></table>
<h3 id="动名词"><a href="#动名词" class="headerlink" title="动名词"></a>动名词</h3><p><strong>动词原形+ing，本质是名词–主动、进行</strong></p>
<table>
<thead>
<tr>
<th>形式</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>作主语</td>
<td>Eating carrots is healthy for the rabbit</td>
</tr>
<tr>
<td>作宾语</td>
<td>the rabbit likes eating carrots.</td>
</tr>
<tr>
<td>作表语</td>
<td>The rabbit’s hobby is growing carrots.</td>
</tr>
<tr>
<td>作定语</td>
<td>a sleeping pill 表示名词的性质、功能或者用途.等价于 a pill for sleeping</td>
</tr>
</tbody></table>
<p>需要注意的是，虽然理论上任何动词不定式和动名词可以充当另一个动词的宾语，但是实际上不是，如enjoy不能用不定式充当宾语等。同样，也有些动词不能直接接动名词，而是要借助介词，比如  <code>ex:The rabbit is looking forward to eating carrots</code> 这里的to是介词而不是不定式的to。</p>
<h3 id="固定搭配"><a href="#固定搭配" class="headerlink" title="固定搭配"></a>固定搭配</h3><p><strong>不定式与动名词的使用范围</strong></p>
<ol>
<li>如stop to do&#x2F;doing,forget to do&#x2F;doing,remenber to do&#x2F;doing……，前者指怎样(停止、记得……)去做某事)还没做)，后者指怎样去做某事)已经做了)</li>
<li>感到用ed，令人ing.如interested与interesting</li>
</ol>
<h3 id="现在分词"><a href="#现在分词" class="headerlink" title="现在分词"></a>现在分词</h3><p><strong>本质是形容词–主动、进行</strong></p>
<table>
<thead>
<tr>
<th>形式</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>作表语</td>
<td>the rabbit is charming  很多的形容词实际上就是现在分词</td>
</tr>
<tr>
<td>作宾补</td>
<td>The wolf saw the rabbit eating a carrot.强调动作进行的状态。即狼看到兔子正在吃</td>
</tr>
<tr>
<td>作状语</td>
<td>Not knowing what to eat,the rabbit skipped lunch. 可以表示原因、时间、伴随等关系</td>
</tr>
<tr>
<td>作定语</td>
<td>a sleeping rabbit. 表明兔子的状态是睡觉，但是不同于动名词作定语。</td>
</tr>
</tbody></table>
<h3 id="过去分词"><a href="#过去分词" class="headerlink" title="过去分词"></a>过去分词</h3><p><strong>暗含被动关系，不表示过去时间</strong></p>
<table>
<thead>
<tr>
<th align="left">形式</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td align="left">作<strong>后置定语</strong></td>
<td>The carrot cake eaten by the rabbit is delicious</td>
</tr>
<tr>
<td align="left">作表语</td>
<td>The rabbit is interested in growing carrots.</td>
</tr>
<tr>
<td align="left">作宾补</td>
<td>The rabbit found his carrot stolen.</td>
</tr>
<tr>
<td align="left">作状语</td>
<td>1. 表地点：Seen from the hill,the carrot field looks beautiful.  2. 表原因：Born in a rabbit family,the rabbit has been growing carrots all his life. 3. 表条件：Given another chance,the rabbit would go to the wolf’s party.&#96;</td>
</tr>
</tbody></table>
<p>判断谓语使用现在分词还是过去分词，看主语是主动还是被动完成动作。<code>ex:seen from the hill,the carrot field looks beautiful</code> 田地是“被看”，所以使用过去分词</p>
<hr>
<p>特例：独立主格：ex:The work finished,the rabbit went home.这里went是谓语动词，finished是非谓语动词(过去分词)，修饰work.</p>
<hr>
<h3 id="扩展：独立主格"><a href="#扩展：独立主格" class="headerlink" title="扩展：独立主格"></a>扩展：独立主格</h3><p>我们来看下这个句子<code>because he was invited by the wolf,the rabbit decided to go to the party.</code> 如果用过去分词来表示(因为这里表原因而且是被动)，则变为<code>Invited by the wolf,the rabbit decided to go to the party</code>。</p>
<p>但如果是主动关系呢？</p>
<p>我们来看一下这个句子<code>because the wolf invited him,the rabbit decided to go to the party.</code> 这是一个完整的句子，如果我们要将前面的句子简化。则改为<code>The wolf inviting him,the rabbit decided to go to the party.</code><br>The rabbit句子是句子的主干，前面句子表示原因，invite这个动作由the wolf发出，所以是主动关系-使用现在分词。The wolf是前面句子的逻辑主语，也就是独立主语后面不能用动词原形。</p>
<p>独立主格的结构：名词|代词+be动词的现在分词being，然后再把being省掉。<br>例如：<code>The rabbit came in,carrot (being) in hand</code><br>特殊独立主格：with+宾语+宾语补足语<br><code>With the work finished,the rabbit went home.</code> ⇒ the work finished,the rabbit went home.</p>
<p>由此可得，<u>独立主格是和非谓语结构紧密相连的，更像是非谓语动词省去be的简化形式</u>，不过省略的前提是存在逻辑主格。</p>
<h2 id="助动词"><a href="#助动词" class="headerlink" title="助动词"></a>助动词</h2><p>定义：辅助动词构成谓语但是本身“不能“作谓语动词的词就是助动词。</p>
<blockquote>
<p>这里的“不能”不是说助动词不能作动词，助动词作实义动词时可以作谓语动词，比如do，be等.</p>
</blockquote>
<p><code>ex:the rabbit will eat a rabbit.</code> 谓语动词本身无法表达“将来”的时间，所以需要借助will来构成“将来时”。</p>
<p>在很多语法书中将情态动词与助动词单独分类，但实际上<strong>情态动词也是起辅助作用，“不能”单独做谓语动词</strong>，所以本质上情态动词还是助动词。这里我就将两者作为一类</p>
<h3 id="助动词分类"><a href="#助动词分类" class="headerlink" title="助动词分类"></a>助动词分类</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">1.基本</button><button type="button" class="tab">2.情态动词</button><button type="button" class="tab">3.半助动词</button></div><div class="tab-contents"><div class="tab-item-content active"><p><strong>be、do、have</strong></p></div><div class="tab-item-content"><ol>
<li><p>can&#x2F;could： </p>
<ol>
<li><p>前者是有能力，后者是过去有能力，现在有没有不知道 <code>ex:I can  kill a wolf</code></p>
</li>
<li><p>前后都可以表示请求、许可，后者更加委婉。 <code>ex:Could i borrow your book?</code></p>
</li>
<li><p>前后都表示可能性，后者表示对过去的推测&#x2F;现在的可能性  <code>ex:Angthing can happen.</code></p>
</li>
</ol>
</li>
<li><p>may&#x2F;might：</p>
<ol>
<li>表示请求或者许可，后者更礼貌  <code>ex:May I borrow your book?</code></li>
<li>表示可能性，后者的可能性更小 <code>ex:He may be at home.</code></li>
<li>表示祝愿 <code>ex:May you succeed!</code> 这种情况不使用might</li>
</ol>
</li>
<li><p>must</p>
<ol>
<li>表示必须  <code>ex:you must do your homework.</code></li>
<li>表示禁止must not 意思是必须不、绝对不，否定的意思更强烈  <code>ex:you must not smoke here</code></li>
<li>表示推测，而且是肯定的推测  <code>ex:The light is on.The rabbit must be at home.</code></li>
</ol>
</li>
<li><p>will&#x2F;would：</p>
<ol>
<li>构成将来时 <code>ex:I will have breakfast.</code></li>
<li>表示请求，后者更加委婉 <code>ex:Would you give me a cup of coffee?</code></li>
<li>表推测，假设，后者的不确定性更大建议 <code>ex:Ask him,He will konw.</code></li>
</ol>
</li>
<li><p>shall&#x2F;should：</p>
<ol>
<li>shall可以构成将来时  <code>ex:I shall be there at 9AM.</code></li>
<li>shall表示请求或者征求意见  <code>ex:Shall we go to the movie?</code></li>
<li>表示警告，命令  <code>ex:You shall not pass!</code></li>
<li>should表示应当  </li>
<li>should表示有一定根据的推测  <code>ex:It should rain tomorrow.</code></li>
<li>should表示“竟然”   <code>ex:It&#39;s surprising that he should be late.</code></li>
<li>虚拟语气  <code>ex:If it should rain tomorrow,I wouldn&#39;t go.</code></li>
</ol>
</li>
<li><p>ought to：应该，语气比should更强烈  <code>ex:We ought to finish it first.</code></p>
</li>
<li><p>dare&#x2F;dared ：</p>
<ol>
<li>实意动词：敢，冒险</li>
<li>情态动词：敢   <code>ex:How dare you.</code></li>
</ol>
</li>
<li><p>need：</p>
<ol>
<li>需要 </li>
<li>既可以作实义动词，也可以作情态动词 <code>ex:Students need study.</code> &#x3D;&#x3D; <code>ex:Student need to study.</code>  前面的need是情态动词，后面的是实义动词</li>
</ol>
</li>
<li><p>used to：表过去的动作，往往是习惯或者是重复的动作，</p>
</li>
</ol></div><div class="tab-item-content"><table>
<thead>
<tr>
<th>形式</th>
<th>含义</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>be able to</td>
<td>表示能力，可以表示将来的能力|特别注意的是，was&#x2F;were able to 表示成功做成</td>
<td>I’ll be able to reach school on time|I was able to reach school on time because I left home early.</td>
</tr>
<tr>
<td>be going to|be about to|be to</td>
<td>表示将要做某事，第一个表示计划做某事，第二个是马上做某事，第三个是被命令做某事</td>
<td>I am going to eat dinner at 6 PM today.</td>
</tr>
<tr>
<td>had better</td>
<td>最好做，缩写是’d better</td>
<td>you’d better listen to me.</td>
</tr>
</tbody></table></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<h2 id="系动词"><a href="#系动词" class="headerlink" title="系动词"></a>系动词</h2><p>定义：相当于C语言中的赋值符号&#x3D;，将后者赋予前者</p>
<p>如：I am a rabbit 就是将rabbit赋予给我，即我&#x3D;rabbit。某某起来的系动词(<code>ex:he looks handsome</code>)与此相同，只不过在翻译的时候增加了系动词的意思。</p>
<h2 id="使役动词"><a href="#使役动词" class="headerlink" title="使役动词"></a>使役动词</h2><p>定义：意思是使、让、令的词语，语法结构：使役动词+宾语+宾语补足语</p>
<p><strong>常见的使役动词</strong></p>
<ol>
<li>make：<ol>
<li>make+动词原形(其实是省去 to的不定式)： <code>ex:Employer make his employee work once again.</code></li>
<li>形容词 如：<code>the cattot made the wolf full</code></li>
</ol>
</li>
<li>let：允许某人做某事(不绝对)let+动词原形(其实是省去 to的不定式) <code>ex:I&#39;ll let the wolf eat some chocolate.</code> |副词  <code>ex:let me out.</code></li>
<li>have：have +动词原形(给某人、物&#x2F;责任做) 如：<code>I will have the wolf wash the dishes</code>  | have + 动词过去分词 表示让某人做某事</li>
<li>get：get +不定式(说服&#x2F;鼓励……做……)  <code>I&#39;ll get the wolf to clean the kitchen.</code>|get +过去分词    <code>ex:I got my nails done.</code></li>
</ol>
<h1 id="从句"><a href="#从句" class="headerlink" title="从句"></a>从句</h1><p>举个例子，我看见兔子吃了胡萝卜，这里主语是“我”，谓语动词是”看见“，那宾语是什么？是”兔子吃了胡萝卜“这件事，这件事本身单独看是完整的句子，<strong>这种充当句子成分的句子就叫做从句</strong>。英语为 <code>ex:I saw that the rabbit ate a carrot.</code> 这里I saw 为主句，that及其之后的是从句。</p>
<p>句子分类</p>
<ol>
<li>简单句：不可再拆</li>
<li>复合句：不分主次，也就是并列。</li>
<li>复杂句：主句+从句</li>
</ol>
<p>在句子中，每一个句子成分都可以由句子充当，比如主语被句子充当就变成主句从句。分成三大类就是名词从句、形容词从句、副词从句。</p>
<p><strong>如何理解中式造句与英式造句之间的差异？</strong>比如这句话“一根我买来的胡萝卜”，在中文中用形容词(定语)+名词的方式，无论定语有多长，而在英语中是在在被修饰的词之后(<strong>先行词)</strong>+与他有关系的词(<strong>关系词</strong>)+句子补充说明，这里就是 <code>ex:a carrot that I bought.</code>  即<strong>中文中定语都是前置的，而英语中定语大部分都是后置的</strong>。也就是说，在用英语造句的时候，可以先将对应的中文拆句，比如“一只几个月前开始在B站上传视频专门教英语的讨人喜爱的兔子”，核心主干是“<strong>一只兔子</strong>”，而“几个月前”“开始在B站上传视频”“专门教英语的”“讨人喜爱的”全都是定语，可以将其放在关系词后面，再按照一定的顺序进行调整。</p>
<h2 id="关系词"><a href="#关系词" class="headerlink" title="关系词"></a>关系词</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol>
<li>关系代词：代指前面的部分 <code>ex:The rabbit is eating a carrot that I bought.</code> 可以看到，后面的句子作陈述句的时候是<code>ex:I bought a carrot.</code>,然后用that 代指 a carrot ,再将关系代词提前，则变为<code>ex:that I bought.</code> 常见的还有who\whom\which\whose .<ol>
<li>that与which的区别:  当先行词是唯一的时候使用that，而先行词多选一的时候使用which. <code>ex:the only rabbit that ate a carrot.</code>  <code>ex:The rabbit ate a carrot which I bought.</code> 言下之意就是这里有多个胡萝卜，但这个兔子只吃了我买的那个。</li>
</ol>
</li>
<li>关系副词: 前面的部分在从句中充当副词 <code>ex:This was the place where the rabbit ate the carrot.</code> 当然也可以用关系代词替代，<code>ex:This was the place at which the rabbit ate the carrot.</code> 由此可得，关系副词&#x3D;介词+which</li>
</ol>
<h2 id="形容词性从句"><a href="#形容词性从句" class="headerlink" title="形容词性从句"></a>形容词性从句</h2><h3 id="限定性形容词从句与非限定形容词从句"><a href="#限定性形容词从句与非限定形容词从句" class="headerlink" title="限定性形容词从句与非限定形容词从句"></a>限定性形容词从句与非限定形容词从句</h3><p><code>ex:The rabbit is eating a carrot that I bought.</code> 这里that句限定了carrot的范围&#x2F;性质 而<code>ex:The rabbit ate the carrot,which was on the table.</code> 这里的which更多起到代词的作用，并没有限定的作用。</p>
<h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><ol>
<li>非限定性形容词从句作插入语  <code>ex:My head,which is big,is useful when it rains.</code> </li>
<li>非限定性形容词从句指代整句话  <code>ex:The rabbit ate the carrot,which was not surprising.</code> 这里的which指代The rabbit ate the carrot.</li>
</ol>
<h2 id="名词性从句"><a href="#名词性从句" class="headerlink" title="名词性从句"></a>名词性从句</h2><h3 id="1-主语从句"><a href="#1-主语从句" class="headerlink" title="1. 主语从句"></a>1. 主语从句</h3><p>主语由从句充当 <code>ex:That the rabbit ate a carrot is obvious.</code> 引导词还可以用who&#x2F;where&#x2F;when&#x2F;how&#x2F;what等<strong>主语从句要以引导词作为开头</strong>。</p>
<ul>
<li><p>形式主语</p>
<p>  <code>ex:It is obvious that the rabbit ate a carrot.</code> 这里It作为形式主语，而真正的主语是that句。</p>
</li>
</ul>
<h3 id="2-宾语从句"><a href="#2-宾语从句" class="headerlink" title="2. 宾语从句"></a>2. 宾语从句</h3><ol>
<li>确定信息与不确定信息 <code>ex:I saw that the rabbit ate a carrot.</code> <code>ex:I saw whether the rabbit ate the carrot.</code></li>
<li>that省略：<code>ex:I know (that)the rabbit ate a carrot.</code>  如果that省略之后有歧义则不能省略。</li>
<li>某些词后的宾语从句的否定：否定加在谓语动词前，而非从句中。<code>ex:I don&#39;t think (that) the rabbit is smart.</code> 而不是isn’t</li>
<li><strong>主从时态一致</strong>：<code>ex:I don&#39;t think (that)you&#39;re right.</code> 除非是不变的客观现象(比如the sun rises in the east.)</li>
<li>特殊：be+形容词+that. <code>ex:I am sure that there&#39;s a carrot on the table.</code></li>
</ol>
<h3 id="3-表语从句"><a href="#3-表语从句" class="headerlink" title="3. 表语从句"></a>3. 表语从句</h3><ol>
<li>系动词为be ：<code>ex:The problem is that the rabbit is hungry.</code> </li>
<li>系动词为非be动词：<code>ex:It seems that the rabbit is hungry.</code></li>
</ol>
<h3 id="4-同位语从句"><a href="#4-同位语从句" class="headerlink" title="4. 同位语从句"></a>4. 同位语从句</h3><p>同位语简单来说就是名词的另一种说法。<code>ex:My teacher,Papa Rabbit,likes carrots.</code> 这里的Papa Rabbit实际上指的还是My teacher.</p>
<p><code>ex:The fact that the rabbit ate the carrot did not surprise me.</code></p>
<h3 id="5-宾语补语从句"><a href="#5-宾语补语从句" class="headerlink" title="5. 宾语补语从句"></a>5. 宾语补语从句</h3><p><code>ex:My education made me who I am today.</code> </p>
<h2 id="副词从句"><a href="#副词从句" class="headerlink" title="副词从句"></a>副词从句</h2><p>副词从句充当句子中状语的部分，所以也成为状语从句</p>
<h3 id="分类-2"><a href="#分类-2" class="headerlink" title="分类"></a>分类</h3><ol>
<li><p>表时间</p>
<table>
<thead>
<tr>
<th>含义</th>
<th>引导词</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>在…前</td>
<td>before</td>
<td>The rabbit ate a carrot at home before the wolf stopped by. The到before之前是主句，the wolf到by是从句。如果要将从句提前需要断句Before the wolf stopped by,the rabbit ate a carrot at home.</td>
</tr>
<tr>
<td>在……时</td>
<td>when\while\as。when表示突然，while表示时间段，as表示同时</td>
<td>I ate a carrot as I made the video.</td>
</tr>
<tr>
<td>在……之后</td>
<td>after</td>
<td>The rabbit ate a carrot after the wolf stopped by.</td>
</tr>
<tr>
<td>从之前某一段时间点开始算</td>
<td>since</td>
<td>The rabbit has shared three carrots since the wolf stopped by.</td>
</tr>
<tr>
<td>直到之后的某一时间点</td>
<td>until</td>
<td>The student waited until the bus came.</td>
</tr>
<tr>
<td>一……就……</td>
<td>as soon as</td>
<td>The rabbit will eat a carrot as soon as the wolf leaves.</td>
</tr>
<tr>
<td>下次</td>
<td>the next time</td>
<td>The rabbit will share the biggest carrot the next time the wolf stops by.</td>
</tr>
</tbody></table>
</li>
<li><p>表地点(如：在…地方) 引导词：where+“强调形式”(wherever,anywhere……) <code>ex:The rabbit will go wherever he can find a carrot.</code></p>
</li>
<li><p>表条件(如：如果…) <code>ex:If the rabbit sees a carrot,he will eat it.</code> 遵循“主将从现” ，从句(if引导的句子)的假设是不确定的，不能用will，所以用一般现在时态，而一旦假设成立，那么一定某件事发生，这种确定的发生用一般将来时态。<strong>即条件句比主句落后一个时间段</strong>。其他的引导词如unless,provided,as long as,in case 等</p>
</li>
<li><p>表让步(如：虽然。。但是。…) <code>ex:Even if I see a carrot,I will not eat it.</code> 同样的还是有thought\although\no matter</p>
</li>
<li><p>表方式(如：就好像…)  <code>ex:I feel good as if I had just eaten a carrot.</code> </p>
</li>
<li><p>表比较(如：比。…) <code>ex:He is smarter than I (am).</code> 其实就等效于口语化的 <code>ex:He is smarter than me.</code> 同样比较的词有as……as,the more…… the more.</p>
</li>
<li><p>表原因(如：因为所以。…) <code>ex:The rabbit ate the carrot because he was hungry.</code> 不能用because和so搭配是因为because用来构成复杂句，so用来构成复合句，两者混用会导致句子结构混乱，同理还有though和but.同样的词还有since\as，不过这两个词构成的副词从句一般放在主句前。</p>
</li>
<li><p>表目的)如：为了…) <code>ex:In order that I could finish the video in time,I pulled an all-nighter.</code> 同样的词还有so that.so that既能表示目的也能表示结果，在翻译的时候要注意这一点。</p>
</li>
<li><p>表结果(如：所以…)  <code>ex:I ate a lot of carrots for lunch so that I wasn&#39;t hungry at all in the afternoon.</code> 同样的词还有so,such that,such后面要接名词。</p>
</li>
</ol>
<h1 id="非动词"><a href="#非动词" class="headerlink" title="非动词"></a>非动词</h1><h2 id="冠词"><a href="#冠词" class="headerlink" title="冠词"></a>冠词</h2><p>分类如下</p>
<div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">1.不定冠词</button><button type="button" class="tab">2.定冠词</button><button type="button" class="tab">3.零冠词</button></div><div class="tab-contents"><div class="tab-item-content active"><p><strong>使用范围：判断音素(即首音标而不是字母)发音是元音还是辅音 如 a university&#x2F;an hour</strong></p>
<p><strong>意思分类如下</strong></p>
<table>
<thead>
<tr>
<th>含义</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>泛指</td>
<td>I saw a rabbit.(我看到只兔子-指某一只)</td>
</tr>
<tr>
<td>某一类)看语境去理解)</td>
<td>最好是用相关名词的复数 A rabbit is smarter than a wolf. 这里的意思是兔子比狼聪明</td>
</tr>
<tr>
<td>表示数字1</td>
<td>I gave you a hundred carrots.</td>
</tr>
<tr>
<td>表示每</td>
<td>I give you a hundred carrots a day.</td>
</tr>
<tr>
<td>主谓一致</td>
<td>a teacher and video creator.这里老师和创作者都是指同一个人。如果是a teacher and a video creator. 这里指的是两个人。</td>
</tr>
<tr>
<td>固定搭配</td>
<td>as a result\have a good time……</td>
</tr>
</tbody></table></div><div class="tab-item-content"><p><em><strong>The</strong></em> </p>
<ol>
<li><p>发音</p>
<ol>
<li>两个发音：在辅音音素前读[ðə]比如：the book 那书，the desk 那桌子，the table 那桌子。</li>
<li>在元音音素前读[ði]。比如：the apple 那苹果，the ant 那蚂蚁，the elephant 那大象。</li>
</ol>
</li>
<li><p>意思</p>
<table>
<thead>
<tr>
<th>作用</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td><strong>特指</strong></td>
<td>The school</td>
</tr>
<tr>
<td>再次提到的人或者事物</td>
<td>I saw a rabbit.The rabbit ran fast.</td>
</tr>
<tr>
<td>用在序数词和形容词的最高级前(某种意义上也是特指)</td>
<td>The first rabbit.</td>
</tr>
<tr>
<td>独一无二的名词</td>
<td>The sun,the Great Wall.</td>
</tr>
<tr>
<td>泛指</td>
<td>play the piano. 如果这里the用a则侧重强调弹钢琴的动作。</td>
</tr>
<tr>
<td>固定表达</td>
<td>all the time.</td>
</tr>
<tr>
<td>The +adj表示一类人</td>
<td>the rich should help the poor.</td>
</tr>
</tbody></table>
</li>
</ol></div><div class="tab-item-content"><ol>
<li>复数泛指  <code>ex:Rabbits are smart.</code> 这样更好体现某一类事物</li>
<li>表示概念  <code>ex:Summer is hot.Winter is cold.</code> 这里表达的是“夏季”这一季节概念</li>
<li>专有名词 <code>ex:Washington DC.</code></li>
<li>固定表达：如play +球类&#x2F;棋类&#x2F;非西洋乐器 play+the+西洋乐器</li>
</ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<hr>
<h2 id="介词"><a href="#介词" class="headerlink" title="介词"></a>介词</h2><p><strong>概念</strong>：本意是前置词prepositon ,补充信息的作用。</p>
<h3 id="常见介词分类"><a href="#常见介词分类" class="headerlink" title="常见介词分类"></a>常见介词分类</h3><ol>
<li>简单介词：in\on\with…… 分别具有<strong>多重含义</strong>，所以翻译会与中文不同，所以<u>不要想着找到所有意思的中文与之对应，最好在语境中去理解与记忆。</u></li>
<li>短语介词：According to……</li>
<li>合成介词：into……</li>
<li>分词介词：provided\including……</li>
</ol>
<h3 id="介词的本源与引申"><a href="#介词的本源与引申" class="headerlink" title="介词的本源与引申"></a>介词的本源与引申</h3><ol>
<li>About——on the outside of 在 的外面——引申为关于、大约、针对、具有某种特性、到处。<code>ex:There are about 2 carrots.</code></li>
<li>on——在 之上：有一面确定，所以是较小的范围)“相对的”)<code>ex:Dinner is on me.</code></li>
<li>beyond——在 之外：<code>ex:It&#39;s beyond me.</code></li>
<li>in——在 之内：一般是在一堆东西之间，大范围  <code>ex:dressed in white.In English.</code></li>
<li>At:在一个“点”上.<code>ex:At the corner.At shop.</code></li>
<li>区别：从in到at范围(可以是时间也可以是空间)逐渐变小，<u>但这个范围是相对的</u></li>
</ol>
<table>
<thead>
<tr>
<th>区别</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>in一般表示在某某之中，也就是说明在一个大范围之内&#x2F;但morning比day小为什么能用in？因为这里morning表达的是时间段，相对的”大范围“，所以使用in。</td>
<td>in a year\month\week。</td>
</tr>
<tr>
<td>on表示在……之上，有一面确定，所以是较小的范围</td>
<td>on that day</td>
</tr>
<tr>
<td>at在一个“点”上,这个点是抽象的点，可以是时间的点也可以是地点的点。</td>
<td>at 8 o’clock</td>
</tr>
<tr>
<td>应用含义不同。</td>
<td>Walking in the street.表达在整条街道上移动。Some trash on the street表达街道表面有垃圾。I am at C street and B street. 表达在两条街道的交界带。</td>
</tr>
</tbody></table>
<h3 id="常见介词的用法"><a href="#常见介词的用法" class="headerlink" title="常见介词的用法"></a>常见介词的用法</h3><ol>
<li>in：在内部 <code>ex:In the country.</code> 以……方式</li>
<li>on：在上面、与物体有接触 <code>ex:on the table.</code>   <code>ex:we talked on the phone.</code></li>
<li>at：在某处  <code>ex:at bus station.</code></li>
<li>over:在……上方(可以接触，可以不接触)、覆盖、越过上空|有动态   <code>ex:The plane flew over the mountain.</code></li>
<li>above：在……上方(高于平面)</li>
</ol>
<h3 id="常用其他介词"><a href="#常用其他介词" class="headerlink" title="常用其他介词"></a>常用其他介词</h3><table>
<thead>
<tr>
<th>形式</th>
<th>含义</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>under</td>
<td>在……下方，与over相对，一般在正下方</td>
<td>under the tree</td>
</tr>
<tr>
<td>below</td>
<td>与above相对</td>
<td>The rabbit dived below the surface of the water.</td>
</tr>
<tr>
<td>near</td>
<td>在……周边</td>
<td>The school is near the hospital</td>
</tr>
<tr>
<td>by&#x2F;beside</td>
<td>在……旁边：——引申为不超过 边界&#x2F;不迟于 前</td>
<td>There is a hotel by&#x2F;beside the river.</td>
</tr>
<tr>
<td>next to</td>
<td>靠近，紧挨着</td>
<td>The rabbit sat next to the wolf.</td>
</tr>
<tr>
<td>across</td>
<td>(从表面)穿过</td>
<td>Walk across the sidewalk</td>
</tr>
<tr>
<td>through</td>
<td>(从内部)穿过&#x2F;通过某种方式</td>
<td>go through the tunnel.</td>
</tr>
<tr>
<td>past</td>
<td>经过，路过</td>
<td>Passing through a small area</td>
</tr>
<tr>
<td>in front of&#x2F;in the front of</td>
<td>在……的前面，后者是在内部的前面</td>
<td>The driver is at the front of the car</td>
</tr>
<tr>
<td>before</td>
<td>在……之前</td>
<td>Someone has been here before me</td>
</tr>
<tr>
<td>between……and</td>
<td>两者之间</td>
<td>Between the father and the mother are their children</td>
</tr>
<tr>
<td>among</td>
<td>三者之间或三者以上</td>
<td>He divided the country among his sons</td>
</tr>
<tr>
<td>round&#x2F;around</td>
<td>环绕</td>
<td>trees around the field.</td>
</tr>
<tr>
<td>along</td>
<td>沿着</td>
<td>we walk along the beach</td>
</tr>
<tr>
<td>to</td>
<td>朝着</td>
<td>we are going to town on the bus,okay?</td>
</tr>
<tr>
<td>toward&#x2F;towards</td>
<td>朝着……的方向</td>
<td>walk toward home.</td>
</tr>
<tr>
<td>onto</td>
<td>到……上面</td>
<td>the rabbit jumped onto the table.</td>
</tr>
<tr>
<td>into</td>
<td>到……里面</td>
<td>let’s go into the garden</td>
</tr>
<tr>
<td>out of</td>
<td>从里面出来</td>
<td>an apple rolled out of the bag</td>
</tr>
<tr>
<td>opposite</td>
<td>在……对面</td>
<td>our school is opposite my house.</td>
</tr>
<tr>
<td>against</td>
<td>与……相反；倚靠</td>
<td>The rabbit was leaning against the tree.</td>
</tr>
<tr>
<td>up</td>
<td>沿……向上</td>
<td>put those books up on the top shelf</td>
</tr>
<tr>
<td>down</td>
<td>沿……向下</td>
<td>Is this lift going down</td>
</tr>
<tr>
<td>off</td>
<td>离……有一定距离</td>
<td>New Zealand lies off the eastern coast of Australia.</td>
</tr>
<tr>
<td>until</td>
<td>直到</td>
<td>we did not eat until past midnight</td>
</tr>
<tr>
<td>during</td>
<td>持续；在……期间</td>
<td>during the past 2 days.</td>
</tr>
<tr>
<td>for</td>
<td>因为 ；因 持续；以 价钱</td>
<td>I bought these books for 100 Yuan.</td>
</tr>
<tr>
<td>since</td>
<td>自从</td>
<td>I’ve long since forgotten anything I ever learned</td>
</tr>
<tr>
<td>from to</td>
<td>从……到……</td>
<td>from 9:00 to 10:00.</td>
</tr>
<tr>
<td>by</td>
<td>通过&#x2F;后接度量标准</td>
<td>I go to school by car. &#x2F;They get paid by the hour.</td>
</tr>
<tr>
<td>with</td>
<td>用 ；和 一起；……的原因是</td>
<td>The rabbit is shaking with cold.</td>
</tr>
<tr>
<td>because&#x2F;because of</td>
<td>前接从句后接名词&#x2F;同样后接名词的还有Due to&#x2F;owing to&#x2F;on account of</td>
<td>The rabbit didn’t go out because of the rain.</td>
</tr>
<tr>
<td>of</td>
<td>此外的、附加的</td>
<td>He thought of something important.</td>
</tr>
<tr>
<td>besides</td>
<td>除了……还</td>
<td>I like many things besides carrots.</td>
</tr>
<tr>
<td>except</td>
<td>除了</td>
<td>Everyone went to the party except the rabbit.</td>
</tr>
<tr>
<td>except for</td>
<td>往往用来对之间的内容进行反驳</td>
<td>The party is great except for the loud music.</td>
</tr>
<tr>
<td>……</td>
<td>……</td>
<td>……</td>
</tr>
</tbody></table>
<p>💡尽可能由本源引申扩展义，在具体的语境中理解和记忆，不需要死记。</p>
<h3 id="介词短语"><a href="#介词短语" class="headerlink" title="介词短语"></a>介词短语</h3><p>由介词+宾语组成的短语，可以充当句子成分</p>
<ol>
<li>Between 10 and 11 is a good time for me. 作主语</li>
<li>The meeting is at 2 o’clock.作表语</li>
<li>This is the key to the house.作定语</li>
<li>……</li>
</ol>
<h3 id="短语动词"><a href="#短语动词" class="headerlink" title="短语动词"></a>短语动词</h3><p>由动词+介词构成一个新的动词。比如check out ,make out……。大多数是固定搭配需要记忆。</p>
<hr>
<h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><h3 id="名词的分类"><a href="#名词的分类" class="headerlink" title="名词的分类"></a>名词的分类</h3><ol>
<li>普通名词与专有名词(首字母大写)：如人名Mike，国家China</li>
<li>由单数和复数分：可数名词与不可数名词<ol>
<li>如集合名词：team,可以作单数也可以作复数，不过意思分别为团队、队伍，也就是集合名词的含义会随着单复数而变化。</li>
<li>抽象概念不可数：比如和平peace，诚实honesty</li>
<li>数不清的名词：water 大多数情况下为不可数名词，但是也有例外，如 two waters 意思是两片水域。</li>
<li>专有名词的复数：如Mikes,有时候代表几个加Mike的的人，或者是指Mike一家。</li>
</ol>
</li>
</ol>
<p>💡<strong>名词的单复数不在于名词本身，而是在于名词在不同的语境中要表达什么意思</strong>，然后选择是单数还是复数。如 a glass of water 可数的是杯子而不是水，所以表达复数是two glasses of water.</p>
<h3 id="名词的所有格"><a href="#名词的所有格" class="headerlink" title="名词的所有格"></a>名词的所有格</h3><ol>
<li>‘s:表示从属关系，如Mike’s hand 。如果其主格是复数就打’即可。比如parents’ kids.    <ol>
<li>表示修饰、特性：</li>
<li>并列<strong>共有</strong>的情况下最后一个加所有格：Tom and Jerry’s room</li>
</ol>
</li>
<li>of:a room of school⇒the school’s room</li>
<li>双重所有格：I am a friend of Mike’s.用Mike’s修饰friend.即Mike的朋友有很多，我只是他其中的一个。</li>
</ol>
<h2 id="代词"><a href="#代词" class="headerlink" title="代词"></a>代词</h2><p>定义：就是用一个词代替之前说过的词，更多是用于简化和避免重复。</p>
<h3 id="分类-3"><a href="#分类-3" class="headerlink" title="分类"></a>分类</h3><ol>
<li>人称代词：<ol>
<li>人称代词的“格”：主格或者宾格，即代词在不同的格会有不同的变化。注意 <code>ex:you and I.</code>等<strong>一般习惯把对方放前面，“我”放在后面</strong></li>
<li>人称代词的表格搜一下就能找到，不过比较简单。</li>
<li>物主代词： my(形容词性物主代词) mine(名词性物主代词)<code>ex:It is my carrot.The carrot is mine.</code> 形容词性物主代词充当了形容词，而名词性物主代词充当了名词。</li>
<li>反身代词：<code>ex:I saw myself.</code></li>
<li>强调代词：the rabbit washed the carrots himself(himself作状语)</li>
</ol>
</li>
<li>相互代词：<code>ex:we should help each other.</code>(扩：one another 三者之间|三者以上之间)</li>
<li>指示代词：this these……这，这些——指代离说话人较近的事物|that those……那、那些——指代离说话人较远的事物</li>
<li>不定代词：<table>
<thead>
<tr>
<th>不定代词</th>
<th>区别</th>
</tr>
</thead>
<tbody><tr>
<td>Many\much</td>
<td>前者修饰可数名词，后者修饰不可数名词</td>
</tr>
<tr>
<td>A few\few\a little\little</td>
<td>few接可数名词，little接不可数名词；不加a 表示很少，有否定意义.</td>
</tr>
<tr>
<td>Some\any</td>
<td>前者常用于肯定句，后者常用于否定句；any表示任意一个可以用在肯定句中.Does the rabbit need any carrots?</td>
</tr>
<tr>
<td>Each\every</td>
<td>前者可以单独做主语；each用于两个、两个以上，every用于三个、三个以上.each carrot\every carrot There are many carrots on each side of the street.</td>
</tr>
<tr>
<td>Either\neither</td>
<td>谓语动词用单数 Either of books is OK.</td>
</tr>
<tr>
<td>Both\all</td>
<td>前者是两者都，后者是三者及以上都  All of the rabbits are cute.</td>
</tr>
<tr>
<td>Other\the other\another</td>
<td>第一个表示另外的(+名词)，第二个特指两者中的另外一个，another表示三个或以上另一个.This carrot is bigger than the other carrot.\The rabbit doesn’t like this carrot.\Give him another carrot.</td>
</tr>
<tr>
<td>One\it</td>
<td>One指同一类事物，it指上下文“同一个事物”</td>
</tr>
</tbody></table>
</li>
<li>复合不定代词：every-，some-，any-，no-.形容词在修饰复合不定代词时后置。<code>ex:The rabbit has something important to do.</code></li>
<li>疑问代词：whom who…… <code>ex:Who killed him?</code></li>
<li>连接代词：whom,whichever,what whatever,whoever……在从句中就变成连接代词  <code>ex:From whom did the rabbit get the carrots?</code> <code>ex:What he said isn&#39;t true.</code></li>
<li>关系代词：who\whom\whose\which\that\as:<code>ex:The rabbit whose ears are long ate a carrot.</code></li>
</ol>
<hr>
<h2 id="数词"><a href="#数词" class="headerlink" title="数词"></a>数词</h2><p>分为基数词和序数词</p>
<h3 id="基数"><a href="#基数" class="headerlink" title="基数"></a>基数</h3><ol>
<li>1-10：不解释，已经刻在DNA里面了 11-eleven 12-twelve 13-thirteen 14: +teen(后缀) 20、30……: twen +ty(后缀)</li>
<li>几十+几：twenty-one</li>
<li>百：two hundred ,余数用and连接：three hunred and five(305)</li>
<li>千、万、亿：two thousand|three thousand five hunred and twenty-one(3521)</li>
<li>扩展：三位数划分法：1，000,000,000中间的空格分别是十亿、百万、千(billion million thousand)，西方人按照这样的顺序读数字  <code>ex:four hundred and seventy-eight billion eight hundred and seventy-three million four hundred and sixty-seven thousand eight hundred and twenty-three</code> 478,873,467,823。</li>
<li>用法：<ol>
<li>固定搭配：hundreds\thousands\millions of 成……上…… 本意都是<strong>特别多</strong></li>
<li>充当句子成分：<code>ex:It costs fifty.</code> 充当宾语；<code>ex:you two.</code> two为同位语。</li>
</ol>
</li>
</ol>
<h3 id="序数词"><a href="#序数词" class="headerlink" title="序数词"></a>序数词</h3><p>一般的基数词+th 20—-90(整十数)：基数词把y改写为ie+th。如thirtieth<br>缩写：阿拉伯数字+st|nd|rd.<br>对于任意一个序数词，整十整百位基数词，个位变序数词，如<code>ex:twenty-second.</code> 如果序数词充当句子成分，一般要在前面+the。</p>
<ol>
<li><p>分数：One third 三分之一 a quarter 四分之一 two and one third 2的三分之一次方</p>
</li>
<li><p>小数：one point three four 1.34，加了point就是小数,左边就是实数部分，右边就是小数部分。</p>
</li>
<li><p>百分数：……+percent  <code>ex:two point five percent.</code></p>
</li>
<li><p>倍数：</p>
<table>
<thead>
<tr>
<th>形式</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>倍数+the+计量+of</td>
<td>This carrot is half&#x2F;twice&#x2F;three times the size of that one.</td>
</tr>
<tr>
<td>倍数+as……as……</td>
<td>I have half&#x2F;twice&#x2F;three times as many carrots as he has.</td>
</tr>
<tr>
<td>倍数+比较级+than</td>
<td>I can eat three times faster than he can.</td>
</tr>
<tr>
<td>by+倍数</td>
<td>I have increased my income by three times.</td>
</tr>
</tbody></table>
</li>
<li><p>算术：2 plus 2 is 4:加法|4 minus 2 is 2:减法|2 multiplied by&#x2F;times 3 is 6：乘法|8 divided by 4 is 2：除法|squared：平方|cubed:立方|more than：大于</p>
</li>
<li><p>单位：时间：<code>ex:at seven(7:00) a quarter past seven(7:15) half past seven(7:30) ten to eight(7:50).</code></p>
</li>
<li><p>年份：美式：月|日|年    <code>ex:December 12th,2020.</code>  BC 公元前  <code>ex:500 B.C.</code>  AD公元 2020’s|2020s 二十一世纪20年代</p>
</li>
<li><p>度量表示：</p>
<ol>
<li>基数词+单位词(复数)+形容词(长宽高):<code>ex:The river is 1000 meters long.</code></li>
<li>基数词+单位词(复数)+in+(长宽高)名词:  <code>ex:The river is 1000 meters in length.</code></li>
<li>面积和体积：<code>ex:This room is 700 square meters.</code> 这个房间有700平方米。</li>
<li>……</li>
</ol>
</li>
</ol>
<hr>
<h2 id="形容词"><a href="#形容词" class="headerlink" title="形容词"></a>形容词</h2><h3 id="定语用法"><a href="#定语用法" class="headerlink" title="定语用法"></a>定语用法</h3><ol>
<li>前置定语：<code>a hungry rabbit</code>形容词的顺序：限定词(冠词，物主代词等) +(主观)特征+尺寸+形状+新旧+颜色+来源+材料+用途 如：<code>a beautiful big round new black Chinese wooden table</code> 口诀是 <strong>美小圆旧黄，中国木书房</strong></li>
<li>后置定语：常用于修饰复合不定代词：<code>everything possible</code></li>
<li>形容词短语作定语：<code>the rabbit eager to eat carrots</code></li>
<li>表语：<code>ex:The rabbit is hungry.</code> 有些只能作表语，如asleep,alive……</li>
<li>Alive|asleep|alone等以a开头的形容词:一般只做表语，<code>The rabbit is alive/asleep/alone</code></li>
<li>表示身体状况的形容词一般如ill、will一般只能作表语而不作前置定语 如<code>The rabbit is ill/well.</code></li>
<li>补语：如make+宾语+宾补 <code>ex:carrots make rabbits happy.</code></li>
<li>状语：<code>The rabbit came home,tired and hungry.</code></li>
</ol>
<table>
<thead>
<tr>
<th>形式</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>前置定语</td>
<td>a hungry rabbit形容词的顺序：限定词(冠词，物主代词等) +(主观)特征+尺寸+形状+新旧+颜色+来源+材料+用途 如：a beautiful big round new black Chinese wooden table <em>美小圆旧黄，中国木书房</em></td>
</tr>
<tr>
<td>后置定语，常用于修饰复合不定代词</td>
<td>everything possible</td>
</tr>
<tr>
<td>形容词短语作定语</td>
<td>the rabbit eager to eat carrots</td>
</tr>
<tr>
<td>表语</td>
<td>The rabbit is hungry. 有些只能作表语，如asleep,alive……</td>
</tr>
<tr>
<td>Alive\asleep\alone等以a开头的形容词一般只做表语</td>
<td>The rabbit is alive&#x2F;asleep&#x2F;alone</td>
</tr>
<tr>
<td>表示身体状况的形容词一般如ill、will一般只能作表语而不作前置定语</td>
<td>The rabbit is ill&#x2F;well.</td>
</tr>
<tr>
<td>补语：如make+宾语+宾补</td>
<td>carrots make rabbits happy.</td>
</tr>
<tr>
<td>状语</td>
<td>The rabbit came home,tired and hungry.</td>
</tr>
</tbody></table>
<h3 id="形容词的构成"><a href="#形容词的构成" class="headerlink" title="形容词的构成"></a>形容词的构成</h3><p>很多中间带有“-”往往就是这样的合成词，这样的合成词大多构成形容词。个人感觉能用从句就不用这种合成构词，避免犯错。</p>
<ol>
<li>形容词+形容词&#x2F;现在分词&#x2F;过去分词：<code>a red-hot coal</code> </li>
<li>副词+形容词&#x2F;现在分词&#x2F;过去分词:<code>hard-working</code> </li>
<li>形容词&#x2F;数词+名词:<code>kind-hearted</code> 等效于<code>ex:a man whose heart is kind.</code></li>
<li>名词+形容词&#x2F;现在分词&#x2F;过去分词:<code>a snow-white rabbit</code></li>
</ol>
<h3 id="比较级与最高级"><a href="#比较级与最高级" class="headerlink" title="比较级与最高级"></a>比较级与最高级</h3><table>
<thead>
<tr>
<th>含义</th>
<th>形式</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>一般类</td>
<td>单词末尾+er|+est，有些特殊的要改写y为i再+er\est.</td>
<td></td>
</tr>
<tr>
<td>特殊类</td>
<td>重读闭音节：双写辅音字母+er\est.多音节和部分双音节词前面加上more\most；不规则变化：记！</td>
<td>bigger\more beautiful</td>
</tr>
<tr>
<td>比……更</td>
<td>(倍数)+比较级+than</td>
<td>This carrot is three times bigger than that one.three times 表示的是倍数，后面的比较级+than才是主要结构。</td>
</tr>
<tr>
<td>和……一样</td>
<td>as ……as</td>
<td>This carrot is three times as big as that one.</td>
</tr>
<tr>
<td>越来越</td>
<td>比较级+and+比较级</td>
<td>faster and faster. \more and more beautiful.</td>
</tr>
<tr>
<td>越……，就越……</td>
<td>the+比较级(原因)+补充内容，the+比较级(结果)+补充内容</td>
<td>The more carrots the rabbit eats,the smarter he will become.</td>
</tr>
<tr>
<td>最高级</td>
<td>最高级一般前面+the</td>
<td>Magic mirror on the wall,who is the fairest one of all?</td>
</tr>
</tbody></table>
<hr>
<h2 id="副词"><a href="#副词" class="headerlink" title="副词"></a>副词</h2><p>adj+adv：pretty|fast   大多数副词都是在形容词后面+ly，少部分去e+ly。注意有些词变为副词后词义改变较大。如largely.</p>
<h3 id="副词的修饰作用"><a href="#副词的修饰作用" class="headerlink" title="副词的修饰作用"></a>副词的修饰作用</h3><ol>
<li>副词修饰动词：<code>ex:this rabbit runs fast</code></li>
<li>副词修饰形容词和副词：<code>ex:this rabbit runs very fast;I am doning very well</code></li>
<li>副词修饰名词：<code>ex:this rabbit here runs very fast.</code></li>
<li>副词修饰句子：<code>ex:Obviously,this rabbit here runs very fast.</code></li>
<li>特殊：有些副词既可以当形容词也可以当副词，形容词变为副词是一般+ly(当然有不规则变化)</li>
</ol>
<h3 id="副词的作用"><a href="#副词的作用" class="headerlink" title="副词的作用"></a>副词的作用</h3><ol>
<li>状语：<code>ex:This is a very fast rabbit.</code></li>
<li>表语：一般只在be后面. <code>ex:the wolf is abroad.</code></li>
<li>宾补：<code>let me out</code></li>
</ol>
<h3 id="副词的分类"><a href="#副词的分类" class="headerlink" title="副词的分类"></a>副词的分类</h3><table>
<thead>
<tr>
<th>类型</th>
<th>形式</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>方式副词</td>
<td>一般可以放在任意位置</td>
<td>Suddenly,the driver turned left.</td>
</tr>
<tr>
<td>程度副词</td>
<td>一般谓语修饰的形容词或者副词之前</td>
<td>He speaks very well</td>
</tr>
<tr>
<td>地点副词</td>
<td>一般在句尾,表强调的时候可以位于句首</td>
<td>The rabbit eats carrots indoors&#x2F;outdoors.</td>
</tr>
<tr>
<td>时间副词</td>
<td>任意</td>
<td>The rabbit is eating some carrots now.</td>
</tr>
<tr>
<td>频率副词</td>
<td>大多位于行为动词之前，be动词&#x2F;助动词&#x2F;情态动词之后</td>
<td>The rabbit usually eats carrots.</td>
</tr>
<tr>
<td>疑问副词</td>
<td>差不多是疑问词</td>
<td>How does the rabbit eat carrots.</td>
</tr>
<tr>
<td>连接副词</td>
<td>起到连接句子的作用</td>
<td>I do not know where the rabbit eats carrots.</td>
</tr>
<tr>
<td>关系副词</td>
<td>和从句有关</td>
<td>That was the day when the rabbit ate the carrot for the first time.</td>
</tr>
<tr>
<td>句子副词</td>
<td>修饰整个句子</td>
<td>Obviously,this rabbit here runs very fast</td>
</tr>
</tbody></table>
<hr>
<h2 id="连词"><a href="#连词" class="headerlink" title="连词"></a>连词</h2><h3 id="并列连词"><a href="#并列连词" class="headerlink" title="并列连词"></a>并列连词</h3><p>并列连词：前后单词)或者短语或者句子)关系是平等的</p>
<p>如：<code>and</code> <code>ex:The rabbit not only teaches English but also makes videos</code> <code>ex:Neither the rabbit nor the wolf likes apples.</code> 遵循就近原则</p>
<ol>
<li>选择关系：<code>What does the rabbit like?Apples or carrots? | Hurry up,or/or else/otherwise you&#39;ll be late.</code></li>
<li>转折关系：虽然但是 but yet  <code>The rabbit cooked some carrots,yet he didn&#39;t eat any.</code> </li>
<li>因果关系：<code>The rabbit is busy,so he won&#39;t go to the party tonight.</code>还有for、therefore等</li>
</ol>
<h3 id="从属连词"><a href="#从属连词" class="headerlink" title="从属连词"></a>从属连词</h3><ol>
<li>引导名词性从句:<code>That the rabbit ate the carrot was obvious.</code></li>
<li>引导状语从句：when|while|as|before|after|until|since……具体示例看从句部分</li>
</ol>
<hr>
<h2 id="叹词与限定词"><a href="#叹词与限定词" class="headerlink" title="叹词与限定词"></a>叹词与限定词</h2><p>负责表达情感的声音、单词、词组。</p>
<p>这一部分主要用于日常口语，对书面语影响不大。oh oh my God等就已经足够用了。</p>
<p>限定词：就是用于限定的词，这个属于词性定义，对语法影响不大。</p>
<p><strong>按位置划分</strong></p>
<ol>
<li>前位限定词：某些不定代词；倍数词；分数词…</li>
<li>中位限定词：冠词；物主代词；某些不定代词…</li>
<li>后位限定词：基数词；序数词；量词…</li>
</ol>
<p><code>ex:half(前位) my(中位) carrots.</code> </p>
<hr>
<h1 id="构词法-重点"><a href="#构词法-重点" class="headerlink" title="构词法(重点)"></a>构词法(重点)</h1><h2 id="派生"><a href="#派生" class="headerlink" title="派生"></a>派生</h2><p>前缀+词根(核心、主要意思)+词缀(可改变词性)&#x3D;单词(当然也可以三者排列组合)<br>注意：<strong>不是所有的词都和这三种成分有关，有些词根等表示的意思与通常的意思无关</strong>。用构词快速背记单词和认出单词，但还是要背，只是通过此规律能够减少压力。</p>
<ul>
<li>常见词根<ol>
<li>vis、aud、ed：分别代表视觉、听觉、吃，代表词有visible\audible\edible,这些词根实际上是“外来词汇”.</li>
<li>hydr：表示水   <code>ex:hydrated</code></li>
</ol>
</li>
<li>常见前缀<ol>
<li>In-：<ol>
<li>不 (否定义)<code>ex:invisible.</code> 是visible的反义，即不能看见的。</li>
<li>向里面：<code>ex:inward.</code> 向里面的。</li>
</ol>
</li>
<li>En-：使的   <code>ex:enlarge.</code> 使……变大。</li>
<li>Pre-：前面的</li>
<li>Suf-：后面的，在……之下。</li>
<li>Im-|Un-|il-|ir|mis-|dis-|de-|non-|:含否定意</li>
</ol>
</li>
<li>常见后缀<ol>
<li>ible：能被  <code>ex:credible.</code></li>
<li>able：能被 <code>ex:countable.</code></li>
</ol>
</li>
<li>字母变化： 变化是为了发音<ol>
<li>省略元音：struct+ure+al &#x3D; structural </li>
<li>添加元音：pent+gon &#x3D; pentagon</li>
<li>其他</li>
</ol>
</li>
</ul>
<h2 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h2><p>比较常见于日耳曼词汇</p>
<p>如water→ waterfall waterproof underwater</p>
<p>还有一种是-合成。比如high-class</p>
<h2 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h2><p>就是将词根、词缀分别只取一部分然后拼在一起。</p>
<p><code>ex:smoke+fog=smog</code> </p>
<h2 id="截断"><a href="#截断" class="headerlink" title="截断"></a>截断</h2><p>就是从单词上截取一部分当单词，一般和源单词意思相近。<code>ex：examination→exam</code> application→app</p>
<h2 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h2><p>常用于专有名词(行业术语、网络流行词等)  ,一般将所有单词首字母大写然后拼起来。<code>ex:VIP(very important person)、BBC(British Broadcast Company)</code></p>
<h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><p>即一个单词具有不同的词性，比如fall和education。</p>
<hr>
<h1 id="语法现象"><a href="#语法现象" class="headerlink" title="语法现象"></a>语法现象</h1><h2 id="被动"><a href="#被动" class="headerlink" title="被动"></a>被动</h2><p>这里涉及到语态，即主动语态和被动语态，前者强调动作的执行者，后者强调动作的承受者。</p>
<p><strong>分类</strong></p>
<table>
<thead>
<tr>
<th>形式</th>
<th>解释</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>主+谓+宾</td>
<td>变被动为be+动词过去分词</td>
<td>The rabbit eat a carrot.&#x3D;&gt;The carrot is eaten by the rabbit.  一般被动后面by+动作执行者，可加可不加。</td>
</tr>
<tr>
<td>主+谓+宾(直接宾语)+宾(简介宾语)</td>
<td>\</td>
<td>The carrot was given to the wolf by the rabbit.&#x3D;The wolf was given the carrot by the rabbit.  原句为The rabbit gave the wolf the carrot.</td>
</tr>
<tr>
<td>主+谓+宾+宾补</td>
<td>对于如make这样的动词，主动改为被动时必须加to</td>
<td>The rabbit was invited to the party by the wolf.&#x2F;The rabbit made the wolf (to) laugh.&#x3D;&gt;The wolf was made to laugh by the rabbit.</td>
</tr>
<tr>
<td>主+系+表</td>
<td>一般不能被动</td>
<td>I am smart</td>
</tr>
<tr>
<td>对于谓语是不及物动词</td>
<td>不存在动作的承受者，所以没有被动一说</td>
<td>the rabbit sleeps</td>
</tr>
</tbody></table>
<hr>
<h2 id="倒装"><a href="#倒装" class="headerlink" title="倒装"></a>倒装</h2><p>倒装，即将谓语动词提前。主要分为完全倒装(谓语动词完全在主语前)和部分倒装(仅助动词提前)</p>
<p>也就是说，如果要写倒装句，<strong>最好是先写主动句然后再倒装</strong>。分类如下</p>
<h3 id="完全倒装：谓语动词完全在主语前"><a href="#完全倒装：谓语动词完全在主语前" class="headerlink" title="完全倒装：谓语动词完全在主语前"></a>完全倒装：谓语动词完全在主语前</h3><ol>
<li>副词\介词短语在句首的倒装<ol>
<li>地点副词在句首：<code>ex:There goes the last bus=The last bus goes.</code> 这样强调谓语动词</li>
<li>时间副词在句首的倒装：<code>ex:Now comes the wolf&#39;s turn!</code> 以now和then用的居多。</li>
<li>表运动方向的副词在句首的倒装：<code>ex:Up went the carrots into the air.</code> 原句为<code>ex:The carrots went into the air.</code>.类似的词还有in\out\down\away……。</li>
<li>介词短语在句首的倒装：<code>ex:At the table sat a rabbit</code></li>
</ol>
</li>
<li>主语补语表语的倒装：将作表语的形容词、分词、介词短语、such置于句首时需要完全倒装。<code>ex:Seated on the ground is a group of rabbits.</code></li>
</ol>
<h3 id="部分倒装：仅助动词提前"><a href="#部分倒装：仅助动词提前" class="headerlink" title="部分倒装：仅助动词提前"></a>部分倒装：仅助动词提前</h3><ol>
<li>句首有否定意义词时的倒装 ：<code>ex:Never before have I eaten such a delicious carrot.</code></li>
<li>句首有”only”时的倒装 ：<code>ex:Only in this way can we grow delicious carrots.注；only句首如果修饰主语不用倒装。</code></li>
<li>“if..should.构成虚拟语气的倒装 ：<code>ex:Should I win the lottery, I would buy a huge pile of carrots。</code>&#x3D; <code>ex:If I should win the lottery,I would buy a huge pile of carrots.</code></li>
<li>固定句型中的倒装：<code>ex:Rabbits love eating carrots;so do wolves.</code></li>
</ol>
<h3 id="形式倒装：谓语动词不提前，仅将强调内容放置句首。"><a href="#形式倒装：谓语动词不提前，仅将强调内容放置句首。" class="headerlink" title="形式倒装：谓语动词不提前，仅将强调内容放置句首。"></a>形式倒装：谓语动词不提前，仅将强调内容放置句首。</h3><ol>
<li>感叹句中的倒装 ：<code>ex:What a delicious carrot it is!</code></li>
<li>比较级句型中的倒装(如”the more.,the more.”) ：<code>ex:The more carrots you eat,the healthier you become.</code></li>
<li>“however’”;”whatever’”引导让步状语从句时的倒装 ：<code>ex:However long this video is,you should watch it till the end.</code></li>
<li>“as”,”though”引导让步状语从句时的倒装：<code>ex:Much as he likes the carrot,he doesn&#39;t want to eat it.</code></li>
</ol>
<hr>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>口语强调：重读即可; 语气词强调：见前面的叹词部分。书面强调：黑体字，大小写。</p>
<p><strong>常见的强调</strong></p>
<table>
<thead>
<tr>
<th>形式</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>really、very、just、ever……用附加词突出强调</td>
<td>Rabbits really like carrots.</td>
</tr>
<tr>
<td>重复说某一个词</td>
<td>listen to me,listen to me,very very carefully.</td>
</tr>
<tr>
<td>助动词</td>
<td>Rabbits do like carrots!</td>
</tr>
<tr>
<td>强调代词</td>
<td>I can do it myself!这里的myself是强调作用，去掉它原句意思不变</td>
</tr>
<tr>
<td>倒装</td>
<td>Not a single carrot did I eat yesterday</td>
</tr>
<tr>
<td>感叹句</td>
<td>How big the carrot is!</td>
</tr>
<tr>
<td>固定句式</td>
<td>it +be+that……句式:It is the rabbit who&#x2F;that will eat the carrot.要强调的东西放在it is和that 之间 判断强调句也是看去掉it’s who\that 是否构成完整的句子。</td>
</tr>
</tbody></table>
<hr>
<h2 id="省略"><a href="#省略" class="headerlink" title="省略"></a>省略</h2><h3 id="省略冠词"><a href="#省略冠词" class="headerlink" title="省略冠词"></a>省略冠词</h3><ol>
<li>独一无二的名词前面，如<code>ex:chairman/president/head</code> <code>ex:The rabbit was appointed (the) chairman of the Carrotown Committee.</code></li>
<li>并列关系：<code>ex:Both the rabbit and (the) wolf will be invited to the party.</code>表示并列的词，第二个冠词可以去掉。注意如果去掉冠词之后意思改变就不能去掉冠词如：<code>ex:a teacher and video creator!=a teacher and a video creator</code></li>
<li>某些独立主格结构:<code>ex:The rabbit came in,carrot in hand.</code>省略了with</li>
</ol>
<h3 id="省略介词"><a href="#省略介词" class="headerlink" title="省略介词"></a>省略介词</h3><ol>
<li>时间介词：<code>ex:I worked 60 hours last week.</code>在60前面省略了for</li>
<li>作某事：<code>ex:I am busy (in) making videos.</code></li>
</ol>
<h3 id="省略动词不定式"><a href="#省略动词不定式" class="headerlink" title="省略动词不定式"></a>省略动词不定式</h3><ol>
<li>并列关系：<code>ex:He wanted to stay here and(to) read.</code></li>
<li>不定式中的裸不定式：<code>ex:The wolf made me (to) watch the video.</code></li>
<li>省略从句引导词：<code>ex:This is the rabbit (that) we met yesterday.</code>仅限于限定性定语从句</li>
</ol>
<h3 id="句法省略"><a href="#句法省略" class="headerlink" title="句法省略"></a>句法省略</h3><ol>
<li>祈使句：<code>ex:open the door ,please.</code>省略了主语you</li>
<li>感叹句省略：<code>ex:What a smart rabbit!</code>省略了he is</li>
<li>口语：<code>ex:what did you eat? (I ate)a carrot,</code>还有很多，看实际</li>
<li>并列句:<code>ex:The rabbit went home after work,and (the rabbit) ate a carrot.</code></li>
<li>复杂句：<code>ex:The rabbit will eat the carrot,but I don&#39;t know when (he will eat it).\(I am) sorry to hear that</code> 还有than\if possible等这样的词所在句子也有省略。</li>
</ol>
<hr>
<h2 id="主谓一致"><a href="#主谓一致" class="headerlink" title="主谓一致"></a>主谓一致</h2><p>看这个句子<code>you were late.</code> 主语you和were共同传递了“第二人称，一般&#x2F;过去“这个信息，即主语和谓语动词传递的信息是一致的。主谓一致分为三类</p>
<h3 id="语法一致"><a href="#语法一致" class="headerlink" title="语法一致"></a>语法一致</h3><ol>
<li>谓语动词单复数和主语单复数一致：如<code>ex:time is money。</code>注意不定式主语和动名词主语谓语动词用单数。<code>ex:To eat a carrit every day is good for the rabbit.</code></li>
<li>特殊-假象主语：如<code>ex:as well as\except\but</code> <code>ex:The rabbit as well as other animals gets a carrot.</code>一般遵循就远原则。其本质就是这里的短语看起来像有两个主语实际上只有一个。</li>
<li>不定代词作主语：如everyone\each of 接单数:<code>ex:Each of them gets a carrot.</code>，both of\some of接复数:<code>ex:Both of them like carrots.</code>   none of\neither of 接单复数都行  <code>ex:None of them get/gets a carrot.</code></li>
</ol>
<h3 id="意义一致"><a href="#意义一致" class="headerlink" title="意义一致"></a>意义一致</h3><ol>
<li>同一个主语多重身份：<code>ex:The teacher and video creator is a rabbit.</code>这位老师兼视频创作者是只兔子。这个例子也提醒我们<strong>不要看到and就用复数</strong></li>
<li>复数名词的单数意义：<code>ex:Ten years is a long time.</code>十年是一个时间段，<strong>看它是否表达的是整体而非个体的概念</strong>。<code>ex:A knife and fork is needed for eating the carrot.</code> 这里的意思可不是一把刀和一副叉子，而是整体意义“一副刀叉”.</li>
<li>不定代词的单复数意义：all are quiet)大家都很安静) all is quiet(一切都很安静)也就是看不定代词到底表示什么意思。</li>
<li>名词的形和意：主要看意思，意思是复数谓语动词就用复数。</li>
<li>特殊：单复数同形名词<code>ex:A sheep is eating grass.\\The sheep are eating grass.</code> 第一个句子指的是一只绵羊，第二个句子指的是一群绵羊。集合名词：理论上用单复数都行。如：deer fish team……也是主要看意思，意思是复数谓语动词就用复数。</li>
</ol>
<h3 id="就近一致"><a href="#就近一致" class="headerlink" title="就近一致"></a>就近一致</h3><p>谓语动词的单复数由最近的主语决定。</p>
<ol>
<li>Or|either or……|not only……but also|not but|neither nor：<code>ex:Not only the rabbit but also many other animals like carrots.</code></li>
<li>There be：<code>ex:There is a carrot and two apples on the table.</code></li>
</ol>
<hr>
<h2 id="英语标点"><a href="#英语标点" class="headerlink" title="英语标点"></a>英语标点</h2><p>本段主要侧重于书面语的书写规范。分类如下</p>
<h3 id="逗号：断句"><a href="#逗号：断句" class="headerlink" title="逗号：断句"></a>逗号：断句</h3><ol>
<li>断句：<code>ex:Let&#39;s eat,the wolf.</code></li>
<li>列举：<code>ex:Let&#39;s eat carrots,apples and bananas.</code> 提醒，如果有定语修饰，但是只修饰一个的话也需要用逗号隔开。<code>ex:Let&#39;s eat carrots,red apples ,and bananas.</code>这里强调的是红色的苹果和普通的香蕉，如果不在and前面加逗号就变成了红色的苹果和香蕉。</li>
<li>同位语：<code>ex:I love my parents,the rabbit and the wolf.</code>我爱父母，(它们分别是)兔子和狼。如果不想表达同位语，同样在and前面加上逗号。</li>
<li>引语：<code>ex:The wolf said to the rabbit,&quot;Let&#39;seat,rabbit.&quot;&quot;Well,yes,let&#39;s eat,my dear wolf,&quot;said the rabbit.</code> 第一句逗号之后的引语开头大写，而如果引语在前，则末尾要使用逗号。</li>
<li>插入语：<code>ex:&quot;Well,yes,&quot;said the rabbit,&quot;let&#39;s eat,my dear wolf.&quot;</code>中间的一句就是插入语</li>
<li>并列句、复杂句：<code>ex:The rabbit ate some carrots,but he was still hungry</code> </li>
<li>附加疑问句：<code>ex:This is a tasty carrot,isn&#39;t it?</code> 个人感觉更像反问语句。</li>
<li>时间地点数字格式：<code>Dec 1st,2021|Chengdu,Sichuan,China.</code>记住英语中时间和地点的表示方法。</li>
</ol>
<h3 id="句号"><a href="#句号" class="headerlink" title="句号"></a>句号</h3><p>注意：英文的句号是一个实心的点”.”，不要写成中文的“。”。</p>
<p>句子说完就加句号</p>
<h3 id="分号：并列，有关"><a href="#分号：并列，有关" class="headerlink" title="分号：并列，有关"></a>分号：并列，有关</h3><p><code>ex:The rabbit likes carrots;the wolf likes apples.</code></p>
<h3 id="冒号："><a href="#冒号：" class="headerlink" title="冒号："></a>冒号：</h3><ol>
<li>列举： <code>ex:We have two lunch options:carrots,apples</code></li>
<li>引语：<code>ex:The rabbit: I want to eat carrots.</code> 原句是  <code>The rabbit said,&quot;I want to eat carrots.&quot;</code> </li>
<li>主标题，副标题： <code>ex:Carrots:Rabbits&#39;Favorite Food</code>  <code>ex:Sakiro:Shadows Die Twice.</code></li>
<li>时间表达：<code>ex:at 8:00</code></li>
</ol>
<h3 id="引号：和中文用法基本一致"><a href="#引号：和中文用法基本一致" class="headerlink" title="引号：和中文用法基本一致"></a>引号：和中文用法基本一致</h3><p><code>Please don&#39;t be a &quot;freeloader&quot;</code> 可以表强调。</p>
<p>注意英文中没有书名号，一般都是用引号表示的<code>ex:Have you read &quot;The Little Prince&quot;</code> 或者用斜体。<em>The Little Prince</em></p>
<h3 id="破折号"><a href="#破折号" class="headerlink" title="破折号"></a>破折号</h3><p>和中文用法一样，比中文短：<code>ex:You&#39;ve met my best friend-the wolf.</code>或者表示句子中断</p>
<h3 id="问号和感叹号"><a href="#问号和感叹号" class="headerlink" title="问号和感叹号"></a>问号和感叹号</h3><p>不多解释，问号用于问句，感叹号用于感叹句</p>
<h3 id="连字符，撇号"><a href="#连字符，撇号" class="headerlink" title="连字符，撇号"></a>连字符，撇号</h3><p>前者是构词，后者用于所有格或者省略 <code>ex:Hard-working</code> <code>ex:The rabbit&#39;s carrots\you&#39;d better finish it first.</code></p>
<h3 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h3><p>英文的省略号只有三个点，而且居下 <code>ex:To be continued...</code></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>【英语语法精讲合集 (全面, 通俗, 有趣 | 从零打造系统语法体系)】<a href="https://www.bilibili.com/video/BV1XY411J7aG?p=29&vd_source=bb8dacb993f11c0e39f8147c98a2894c">https://www.bilibili.com/video/BV1XY411J7aG?p=29&amp;vd_source=bb8dacb993f11c0e39f8147c98a2894c</a></li>
<li><a href="https://excalidraw.com/#:~:text=Excalidraw%20is%20a%20virtual%20collaborative%20whiteboard%20tool%20that">Excalidraw绘图网站</a></li>
<li><a href="https://www.yingyutu.com/">英语兔 (yingyutu.com)</a> 其实是微信公众号不是网站</li>
<li><a href="https://dictionary.cambridge.org/zhs/%E8%AF%8D%E5%85%B8/">免费的剑桥英语词典和同义词词典 (cambridge.org)</a></li>
</ol>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
</search>
